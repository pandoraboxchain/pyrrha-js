/**
 * Errors definition and helpers
 * This file it is a part of the Pandora Pyrrha Javascript library
 * 
 * @file errors.js
 * @author Kostiantyn Smyrnov <kostysh@gmail.com>
 * @date 2018
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PJS_REQUIRED = exports.EXPECT_TYPE_OPTIONS_REQUIRED = exports.EXPECT_NOT_A_MEMBER = exports.FAILURE_EVENT = exports.TRANSACTION_UNSUCCESSFUL = exports.WEB3_METAMASK_REQUIRED = exports.IPFS_NOT_CONNECTED = exports.IPFS_REQUIRED = exports.CONTRACT_REQUIRED = exports.WEB3_CONNECTION_TIMEOUT = exports.WEB3_NOT_CONNECTED = exports.WEB3_REQUIRED = exports.ADDRESS_REQUIRED = exports.WRONG_TYPE = exports.OPTIONS_REQUIRED = void 0;
const OPTIONS_REQUIRED = 'OPTIONS_REQUIRED';
exports.OPTIONS_REQUIRED = OPTIONS_REQUIRED;
const WRONG_TYPE = 'WRONG_TYPE';
exports.WRONG_TYPE = WRONG_TYPE;
const ADDRESS_REQUIRED = 'ADDRESS_REQUIRED';
exports.ADDRESS_REQUIRED = ADDRESS_REQUIRED;
const WEB3_REQUIRED = 'WEB3_REQUIRED';
exports.WEB3_REQUIRED = WEB3_REQUIRED;
const WEB3_NOT_CONNECTED = 'WEB3_NOT_CONNECTED';
exports.WEB3_NOT_CONNECTED = WEB3_NOT_CONNECTED;
const WEB3_CONNECTION_TIMEOUT = 'WEB3_CONNECTION_TIMEOUT';
exports.WEB3_CONNECTION_TIMEOUT = WEB3_CONNECTION_TIMEOUT;
const CONTRACT_REQUIRED = 'CONTRACT_REQUIRED';
exports.CONTRACT_REQUIRED = CONTRACT_REQUIRED;
const IPFS_REQUIRED = 'IPFS_REQUIRED';
exports.IPFS_REQUIRED = IPFS_REQUIRED;
const IPFS_NOT_CONNECTED = 'IPFS_NOT_CONNECTED';
exports.IPFS_NOT_CONNECTED = IPFS_NOT_CONNECTED;
const WEB3_METAMASK_REQUIRED = 'WEB3_METAMASK_REQUIRED';
exports.WEB3_METAMASK_REQUIRED = WEB3_METAMASK_REQUIRED;
const TRANSACTION_UNSUCCESSFUL = 'TRANSACTION_UNSUCCESSFUL';
exports.TRANSACTION_UNSUCCESSFUL = TRANSACTION_UNSUCCESSFUL;
const FAILURE_EVENT = 'FAILURE_EVENT';
exports.FAILURE_EVENT = FAILURE_EVENT;
const EXPECT_NOT_A_MEMBER = 'EXPECT_NOT_A_MEMBER';
exports.EXPECT_NOT_A_MEMBER = EXPECT_NOT_A_MEMBER;
const EXPECT_TYPE_OPTIONS_REQUIRED = 'EXPECT_TYPE_OPTIONS_REQUIRED';
exports.EXPECT_TYPE_OPTIONS_REQUIRED = EXPECT_TYPE_OPTIONS_REQUIRED;
const PJS_REQUIRED = 'PJS_REQUIRED';
exports.PJS_REQUIRED = PJS_REQUIRED;

var _default = (code, ...args) => {
  let message = 'Unknown error';

  switch (code) {
    case OPTIONS_REQUIRED:
      message = 'Config options is required and expected to be an object';
      break;

    case WRONG_TYPE:
      message = `Wrong property type. Expected '${args[0]}' to be: '${args[1]}', but got: '${args[2]}'`;
      break;

    case WEB3_REQUIRED:
      message = 'Web3 API required';
      break;

    case WEB3_NOT_CONNECTED:
      message = 'Web3 not connected to provider';
      break;

    case WEB3_CONNECTION_TIMEOUT:
      message = `Websocket connection timeout (${args[0]}ms) exceeded`;
      break;

    case WEB3_METAMASK_REQUIRED:
      message = 'MetaMask is required to perform this operation';
      break;

    case CONTRACT_REQUIRED:
      message = `Contract '${args[0]}' is required`;
      break;

    case ADDRESS_REQUIRED:
      message = `Address of '${args[3] || args[0]}' is required. Wrong ethereum address: ${args[2]}`;
      break;

    case IPFS_REQUIRED:
      message = 'IPFS API required';
      break;

    case IPFS_NOT_CONNECTED:
      message = 'No connection to IPFS server';
      break;

    case TRANSACTION_UNSUCCESSFUL:
      message = 'Transaction was unsuccessful';
      break;

    case FAILURE_EVENT:
      message = 'Contract returns an failure event';
      break;
  }

  const err = new Error(message);
  err.code = code || 'UNKNOWN';
  err.args = args;
  return err;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2Vycm9ycy5qcyJdLCJuYW1lcyI6WyJPUFRJT05TX1JFUVVJUkVEIiwiV1JPTkdfVFlQRSIsIkFERFJFU1NfUkVRVUlSRUQiLCJXRUIzX1JFUVVJUkVEIiwiV0VCM19OT1RfQ09OTkVDVEVEIiwiV0VCM19DT05ORUNUSU9OX1RJTUVPVVQiLCJDT05UUkFDVF9SRVFVSVJFRCIsIklQRlNfUkVRVUlSRUQiLCJJUEZTX05PVF9DT05ORUNURUQiLCJXRUIzX01FVEFNQVNLX1JFUVVJUkVEIiwiVFJBTlNBQ1RJT05fVU5TVUNDRVNTRlVMIiwiRkFJTFVSRV9FVkVOVCIsIkVYUEVDVF9OT1RfQV9NRU1CRVIiLCJFWFBFQ1RfVFlQRV9PUFRJT05TX1JFUVVJUkVEIiwiUEpTX1JFUVVJUkVEIiwiY29kZSIsImFyZ3MiLCJtZXNzYWdlIiwiZXJyIiwiRXJyb3IiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQVNBOzs7Ozs7QUFFTyxNQUFNQSxnQkFBZ0IsR0FBRyxrQkFBekI7O0FBQ0EsTUFBTUMsVUFBVSxHQUFHLFlBQW5COztBQUNBLE1BQU1DLGdCQUFnQixHQUFHLGtCQUF6Qjs7QUFDQSxNQUFNQyxhQUFhLEdBQUcsZUFBdEI7O0FBQ0EsTUFBTUMsa0JBQWtCLEdBQUcsb0JBQTNCOztBQUNBLE1BQU1DLHVCQUF1QixHQUFHLHlCQUFoQzs7QUFDQSxNQUFNQyxpQkFBaUIsR0FBRyxtQkFBMUI7O0FBQ0EsTUFBTUMsYUFBYSxHQUFHLGVBQXRCOztBQUNBLE1BQU1DLGtCQUFrQixHQUFHLG9CQUEzQjs7QUFDQSxNQUFNQyxzQkFBc0IsR0FBRyx3QkFBL0I7O0FBQ0EsTUFBTUMsd0JBQXdCLEdBQUcsMEJBQWpDOztBQUNBLE1BQU1DLGFBQWEsR0FBRyxlQUF0Qjs7QUFDQSxNQUFNQyxtQkFBbUIsR0FBRyxxQkFBNUI7O0FBQ0EsTUFBTUMsNEJBQTRCLEdBQUcsOEJBQXJDOztBQUNBLE1BQU1DLFlBQVksR0FBRyxjQUFyQjs7O2VBRVEsQ0FBQ0MsSUFBRCxFQUFPLEdBQUdDLElBQVYsS0FBbUI7QUFDOUIsTUFBSUMsT0FBTyxHQUFHLGVBQWQ7O0FBRUEsVUFBUUYsSUFBUjtBQUNJLFNBQUtmLGdCQUFMO0FBQ0lpQixNQUFBQSxPQUFPLEdBQUcseURBQVY7QUFDQTs7QUFFSixTQUFLaEIsVUFBTDtBQUNJZ0IsTUFBQUEsT0FBTyxHQUFJLGtDQUFpQ0QsSUFBSSxDQUFDLENBQUQsQ0FBSSxhQUFZQSxJQUFJLENBQUMsQ0FBRCxDQUFJLGdCQUFlQSxJQUFJLENBQUMsQ0FBRCxDQUFJLEdBQS9GO0FBQ0E7O0FBRUosU0FBS2IsYUFBTDtBQUNJYyxNQUFBQSxPQUFPLEdBQUcsbUJBQVY7QUFDQTs7QUFFSixTQUFLYixrQkFBTDtBQUNJYSxNQUFBQSxPQUFPLEdBQUcsZ0NBQVY7QUFDQTs7QUFFSixTQUFLWix1QkFBTDtBQUNJWSxNQUFBQSxPQUFPLEdBQUksaUNBQWdDRCxJQUFJLENBQUMsQ0FBRCxDQUFJLGNBQW5EO0FBQ0E7O0FBRUosU0FBS1Asc0JBQUw7QUFDSVEsTUFBQUEsT0FBTyxHQUFHLGdEQUFWO0FBQ0E7O0FBRUosU0FBS1gsaUJBQUw7QUFDSVcsTUFBQUEsT0FBTyxHQUFJLGFBQVlELElBQUksQ0FBQyxDQUFELENBQUksZUFBL0I7QUFDQTs7QUFFSixTQUFLZCxnQkFBTDtBQUNJZSxNQUFBQSxPQUFPLEdBQUksZUFBY0QsSUFBSSxDQUFDLENBQUQsQ0FBSixJQUFXQSxJQUFJLENBQUMsQ0FBRCxDQUFJLDBDQUF5Q0EsSUFBSSxDQUFDLENBQUQsQ0FBSSxFQUE3RjtBQUNBOztBQUVKLFNBQUtULGFBQUw7QUFDSVUsTUFBQUEsT0FBTyxHQUFHLG1CQUFWO0FBQ0E7O0FBRUosU0FBS1Qsa0JBQUw7QUFDSVMsTUFBQUEsT0FBTyxHQUFHLDhCQUFWO0FBQ0E7O0FBRUosU0FBS1Asd0JBQUw7QUFDSU8sTUFBQUEsT0FBTyxHQUFHLDhCQUFWO0FBQ0E7O0FBRUosU0FBS04sYUFBTDtBQUNJTSxNQUFBQSxPQUFPLEdBQUcsbUNBQVY7QUFDQTtBQS9DUjs7QUFrREEsUUFBTUMsR0FBRyxHQUFHLElBQUlDLEtBQUosQ0FBVUYsT0FBVixDQUFaO0FBQ0FDLEVBQUFBLEdBQUcsQ0FBQ0gsSUFBSixHQUFXQSxJQUFJLElBQUksU0FBbkI7QUFDQUcsRUFBQUEsR0FBRyxDQUFDRixJQUFKLEdBQVdBLElBQVg7QUFDQSxTQUFPRSxHQUFQO0FBQ0gsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXJyb3JzIGRlZmluaXRpb24gYW5kIGhlbHBlcnNcbiAqIFRoaXMgZmlsZSBpdCBpcyBhIHBhcnQgb2YgdGhlIFBhbmRvcmEgUHlycmhhIEphdmFzY3JpcHQgbGlicmFyeVxuICogXG4gKiBAZmlsZSBlcnJvcnMuanNcbiAqIEBhdXRob3IgS29zdGlhbnR5biBTbXlybm92IDxrb3N0eXNoQGdtYWlsLmNvbT5cbiAqIEBkYXRlIDIwMThcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBjb25zdCBPUFRJT05TX1JFUVVJUkVEID0gJ09QVElPTlNfUkVRVUlSRUQnO1xuZXhwb3J0IGNvbnN0IFdST05HX1RZUEUgPSAnV1JPTkdfVFlQRSc7XG5leHBvcnQgY29uc3QgQUREUkVTU19SRVFVSVJFRCA9ICdBRERSRVNTX1JFUVVJUkVEJztcbmV4cG9ydCBjb25zdCBXRUIzX1JFUVVJUkVEID0gJ1dFQjNfUkVRVUlSRUQnO1xuZXhwb3J0IGNvbnN0IFdFQjNfTk9UX0NPTk5FQ1RFRCA9ICdXRUIzX05PVF9DT05ORUNURUQnO1xuZXhwb3J0IGNvbnN0IFdFQjNfQ09OTkVDVElPTl9USU1FT1VUID0gJ1dFQjNfQ09OTkVDVElPTl9USU1FT1VUJztcbmV4cG9ydCBjb25zdCBDT05UUkFDVF9SRVFVSVJFRCA9ICdDT05UUkFDVF9SRVFVSVJFRCc7XG5leHBvcnQgY29uc3QgSVBGU19SRVFVSVJFRCA9ICdJUEZTX1JFUVVJUkVEJztcbmV4cG9ydCBjb25zdCBJUEZTX05PVF9DT05ORUNURUQgPSAnSVBGU19OT1RfQ09OTkVDVEVEJztcbmV4cG9ydCBjb25zdCBXRUIzX01FVEFNQVNLX1JFUVVJUkVEID0gJ1dFQjNfTUVUQU1BU0tfUkVRVUlSRUQnO1xuZXhwb3J0IGNvbnN0IFRSQU5TQUNUSU9OX1VOU1VDQ0VTU0ZVTCA9ICdUUkFOU0FDVElPTl9VTlNVQ0NFU1NGVUwnO1xuZXhwb3J0IGNvbnN0IEZBSUxVUkVfRVZFTlQgPSAnRkFJTFVSRV9FVkVOVCc7XG5leHBvcnQgY29uc3QgRVhQRUNUX05PVF9BX01FTUJFUiA9ICdFWFBFQ1RfTk9UX0FfTUVNQkVSJztcbmV4cG9ydCBjb25zdCBFWFBFQ1RfVFlQRV9PUFRJT05TX1JFUVVJUkVEID0gJ0VYUEVDVF9UWVBFX09QVElPTlNfUkVRVUlSRUQnO1xuZXhwb3J0IGNvbnN0IFBKU19SRVFVSVJFRCA9ICdQSlNfUkVRVUlSRUQnO1xuXG5leHBvcnQgZGVmYXVsdCAoY29kZSwgLi4uYXJncykgPT4ge1xuICAgIGxldCBtZXNzYWdlID0gJ1Vua25vd24gZXJyb3InO1xuICAgICAgICBcbiAgICBzd2l0Y2ggKGNvZGUpIHtcbiAgICAgICAgY2FzZSBPUFRJT05TX1JFUVVJUkVEOlxuICAgICAgICAgICAgbWVzc2FnZSA9ICdDb25maWcgb3B0aW9ucyBpcyByZXF1aXJlZCBhbmQgZXhwZWN0ZWQgdG8gYmUgYW4gb2JqZWN0JztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgV1JPTkdfVFlQRTpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgV3JvbmcgcHJvcGVydHkgdHlwZS4gRXhwZWN0ZWQgJyR7YXJnc1swXX0nIHRvIGJlOiAnJHthcmdzWzFdfScsIGJ1dCBnb3Q6ICcke2FyZ3NbMl19J2A7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFdFQjNfUkVRVUlSRUQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gJ1dlYjMgQVBJIHJlcXVpcmVkJztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgV0VCM19OT1RfQ09OTkVDVEVEOlxuICAgICAgICAgICAgbWVzc2FnZSA9ICdXZWIzIG5vdCBjb25uZWN0ZWQgdG8gcHJvdmlkZXInO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBXRUIzX0NPTk5FQ1RJT05fVElNRU9VVDpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgV2Vic29ja2V0IGNvbm5lY3Rpb24gdGltZW91dCAoJHthcmdzWzBdfW1zKSBleGNlZWRlZGA7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFdFQjNfTUVUQU1BU0tfUkVRVUlSRUQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gJ01ldGFNYXNrIGlzIHJlcXVpcmVkIHRvIHBlcmZvcm0gdGhpcyBvcGVyYXRpb24nO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBDT05UUkFDVF9SRVFVSVJFRDpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgQ29udHJhY3QgJyR7YXJnc1swXX0nIGlzIHJlcXVpcmVkYDtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQUREUkVTU19SRVFVSVJFRDpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgQWRkcmVzcyBvZiAnJHthcmdzWzNdIHx8IGFyZ3NbMF19JyBpcyByZXF1aXJlZC4gV3JvbmcgZXRoZXJldW0gYWRkcmVzczogJHthcmdzWzJdfWA7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIElQRlNfUkVRVUlSRUQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gJ0lQRlMgQVBJIHJlcXVpcmVkJztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgSVBGU19OT1RfQ09OTkVDVEVEOlxuICAgICAgICAgICAgbWVzc2FnZSA9ICdObyBjb25uZWN0aW9uIHRvIElQRlMgc2VydmVyJztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgVFJBTlNBQ1RJT05fVU5TVUNDRVNTRlVMOlxuICAgICAgICAgICAgbWVzc2FnZSA9ICdUcmFuc2FjdGlvbiB3YXMgdW5zdWNjZXNzZnVsJztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgRkFJTFVSRV9FVkVOVDpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSAnQ29udHJhY3QgcmV0dXJucyBhbiBmYWlsdXJlIGV2ZW50JztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICBlcnIuY29kZSA9IGNvZGUgfHwgJ1VOS05PV04nO1xuICAgIGVyci5hcmdzID0gYXJncztcbiAgICByZXR1cm4gZXJyO1xufTtcbiJdfQ==