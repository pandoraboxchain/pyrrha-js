/**
 * Errors definition and helpers
 * This file it is a part of the Pandora Pyrrha Javascript library
 * 
 * @file errors.js
 * @author Kostiantyn Smyrnov <kostysh@gmail.com>
 * @date 2018
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FAILURE_EVENT = exports.TRANSACTION_UNSUCCESSFUL = exports.WEB3_METAMASK_REQUIRED = exports.IPFS_NOT_CONNECTED = exports.IPFS_REQUIRED = exports.ADDRESS_REQUIRED = exports.CONTRACT_REQUIRED = exports.WEB3_NOT_CONNECTED = exports.WEB3_REQUIRED = exports.SPECIFIC_ADDRESS_REQUIRED = exports.OPTIONS_REQUIRED = void 0;
const OPTIONS_REQUIRED = 'OPTIONS_REQUIRED';
exports.OPTIONS_REQUIRED = OPTIONS_REQUIRED;
const SPECIFIC_ADDRESS_REQUIRED = 'SPECIFIC_ADDRESS_REQUIRED';
exports.SPECIFIC_ADDRESS_REQUIRED = SPECIFIC_ADDRESS_REQUIRED;
const WEB3_REQUIRED = 'WEB3_REQUIRED';
exports.WEB3_REQUIRED = WEB3_REQUIRED;
const WEB3_NOT_CONNECTED = 'WEB3_NOT_CONNECTED';
exports.WEB3_NOT_CONNECTED = WEB3_NOT_CONNECTED;
const CONTRACT_REQUIRED = 'CONTRACT_REQUIRED';
exports.CONTRACT_REQUIRED = CONTRACT_REQUIRED;
const ADDRESS_REQUIRED = 'ADDRESS_REQUIRED';
exports.ADDRESS_REQUIRED = ADDRESS_REQUIRED;
const IPFS_REQUIRED = 'IPFS_REQUIRED';
exports.IPFS_REQUIRED = IPFS_REQUIRED;
const IPFS_NOT_CONNECTED = 'IPFS_NOT_CONNECTED';
exports.IPFS_NOT_CONNECTED = IPFS_NOT_CONNECTED;
const WEB3_METAMASK_REQUIRED = 'WEB3_METAMASK_REQUIRED';
exports.WEB3_METAMASK_REQUIRED = WEB3_METAMASK_REQUIRED;
const TRANSACTION_UNSUCCESSFUL = 'TRANSACTION_UNSUCCESSFUL';
exports.TRANSACTION_UNSUCCESSFUL = TRANSACTION_UNSUCCESSFUL;
const FAILURE_EVENT = 'FAILURE_EVENT';
exports.FAILURE_EVENT = FAILURE_EVENT;

var _default = (code, ...args) => {
  let message = 'Unknown error';

  switch (code) {
    case SPECIFIC_ADDRESS_REQUIRED:
      message = `Address required ${args[0] ? '(' + args[0] + ')' : ''}`;
      break;

    case OPTIONS_REQUIRED:
      message = 'Config options is required and expected to be an object';
      break;

    case WEB3_REQUIRED:
      message = 'Web3 API required';
      break;

    case WEB3_NOT_CONNECTED:
      message = 'Web3 not connected to provider';
      break;

    case WEB3_METAMASK_REQUIRED:
      message = 'MetaMask is required to perform this operation';
      break;

    case CONTRACT_REQUIRED:
      message = `Contract "${args[0]}" is required`;
      break;

    case ADDRESS_REQUIRED:
      message = `Address of "${args[0]}" contract is required`;
      break;

    case IPFS_REQUIRED:
      message = 'IPFS API required';
      break;

    case IPFS_NOT_CONNECTED:
      message = 'No connection to IPFS server';
      break;

    case TRANSACTION_UNSUCCESSFUL:
      message = 'Transaction was unsuccessful';
      break;

    case FAILURE_EVENT:
      message = 'Contract returns an failure event';
      break;
  }

  const err = new Error(message);
  err.code = code || 'UNKNOWN';
  err.args = args;
  return err;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2Vycm9ycy5qcyJdLCJuYW1lcyI6WyJPUFRJT05TX1JFUVVJUkVEIiwiU1BFQ0lGSUNfQUREUkVTU19SRVFVSVJFRCIsIldFQjNfUkVRVUlSRUQiLCJXRUIzX05PVF9DT05ORUNURUQiLCJDT05UUkFDVF9SRVFVSVJFRCIsIkFERFJFU1NfUkVRVUlSRUQiLCJJUEZTX1JFUVVJUkVEIiwiSVBGU19OT1RfQ09OTkVDVEVEIiwiV0VCM19NRVRBTUFTS19SRVFVSVJFRCIsIlRSQU5TQUNUSU9OX1VOU1VDQ0VTU0ZVTCIsIkZBSUxVUkVfRVZFTlQiLCJjb2RlIiwiYXJncyIsIm1lc3NhZ2UiLCJlcnIiLCJFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBU0E7Ozs7OztBQUVPLE1BQU1BLG1CQUFtQixrQkFBekI7O0FBQ0EsTUFBTUMsNEJBQTRCLDJCQUFsQzs7QUFDQSxNQUFNQyxnQkFBZ0IsZUFBdEI7O0FBQ0EsTUFBTUMscUJBQXFCLG9CQUEzQjs7QUFDQSxNQUFNQyxvQkFBb0IsbUJBQTFCOztBQUNBLE1BQU1DLG1CQUFtQixrQkFBekI7O0FBQ0EsTUFBTUMsZ0JBQWdCLGVBQXRCOztBQUNBLE1BQU1DLHFCQUFxQixvQkFBM0I7O0FBQ0EsTUFBTUMseUJBQXlCLHdCQUEvQjs7QUFDQSxNQUFNQywyQkFBMkIsMEJBQWpDOztBQUNBLE1BQU1DLGdCQUFnQixlQUF0Qjs7O2VBRVEsQ0FBQ0MsSUFBRCxFQUFPLEdBQUdDLElBQVYsS0FBbUI7QUFDOUIsTUFBSUMsVUFBVSxlQUFkOztBQUVBLFVBQVFGLElBQVI7QUFDSSxTQUFLVix5QkFBTDtBQUNJWSxnQkFBVyxvQkFBbUJELEtBQUssQ0FBTCxJQUFVLE1BQU1BLEtBQUssQ0FBTCxDQUFOLEdBQWdCLEdBQTFCLEdBQWdDLEVBQUcsRUFBakU7QUFDQTs7QUFFSixTQUFLWixnQkFBTDtBQUNJYSxnQkFBVSx5REFBVjtBQUNBOztBQUVKLFNBQUtYLGFBQUw7QUFDSVcsZ0JBQVUsbUJBQVY7QUFDQTs7QUFFSixTQUFLVixrQkFBTDtBQUNJVSxnQkFBVSxnQ0FBVjtBQUNBOztBQUVKLFNBQUtMLHNCQUFMO0FBQ0lLLGdCQUFVLGdEQUFWO0FBQ0E7O0FBRUosU0FBS1QsaUJBQUw7QUFDSVMsZ0JBQVcsYUFBWUQsS0FBSyxDQUFMLENBQVEsZUFBL0I7QUFDQTs7QUFFSixTQUFLUCxnQkFBTDtBQUNJUSxnQkFBVyxlQUFjRCxLQUFLLENBQUwsQ0FBUSx3QkFBakM7QUFDQTs7QUFFSixTQUFLTixhQUFMO0FBQ0lPLGdCQUFVLG1CQUFWO0FBQ0E7O0FBRUosU0FBS04sa0JBQUw7QUFDSU0sZ0JBQVUsOEJBQVY7QUFDQTs7QUFFSixTQUFLSix3QkFBTDtBQUNJSSxnQkFBVSw4QkFBVjtBQUNBOztBQUVKLFNBQUtILGFBQUw7QUFDSUcsZ0JBQVUsbUNBQVY7QUFDQTtBQTNDUjs7QUE4Q0EsUUFBTUMsTUFBTSxJQUFJQyxLQUFKLENBQVVGLE9BQVYsQ0FBWjtBQUNBQyxNQUFJSCxJQUFKLEdBQVdBLFFBQVEsU0FBbkI7QUFDQUcsTUFBSUYsSUFBSixHQUFXQSxJQUFYO0FBQ0EsU0FBT0UsR0FBUDtBQUNILEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEVycm9ycyBkZWZpbml0aW9uIGFuZCBoZWxwZXJzXG4gKiBUaGlzIGZpbGUgaXQgaXMgYSBwYXJ0IG9mIHRoZSBQYW5kb3JhIFB5cnJoYSBKYXZhc2NyaXB0IGxpYnJhcnlcbiAqIFxuICogQGZpbGUgZXJyb3JzLmpzXG4gKiBAYXV0aG9yIEtvc3RpYW50eW4gU215cm5vdiA8a29zdHlzaEBnbWFpbC5jb20+XG4gKiBAZGF0ZSAyMDE4XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgY29uc3QgT1BUSU9OU19SRVFVSVJFRCA9ICdPUFRJT05TX1JFUVVJUkVEJztcbmV4cG9ydCBjb25zdCBTUEVDSUZJQ19BRERSRVNTX1JFUVVJUkVEID0gJ1NQRUNJRklDX0FERFJFU1NfUkVRVUlSRUQnO1xuZXhwb3J0IGNvbnN0IFdFQjNfUkVRVUlSRUQgPSAnV0VCM19SRVFVSVJFRCc7XG5leHBvcnQgY29uc3QgV0VCM19OT1RfQ09OTkVDVEVEID0gJ1dFQjNfTk9UX0NPTk5FQ1RFRCc7XG5leHBvcnQgY29uc3QgQ09OVFJBQ1RfUkVRVUlSRUQgPSAnQ09OVFJBQ1RfUkVRVUlSRUQnO1xuZXhwb3J0IGNvbnN0IEFERFJFU1NfUkVRVUlSRUQgPSAnQUREUkVTU19SRVFVSVJFRCc7XG5leHBvcnQgY29uc3QgSVBGU19SRVFVSVJFRCA9ICdJUEZTX1JFUVVJUkVEJztcbmV4cG9ydCBjb25zdCBJUEZTX05PVF9DT05ORUNURUQgPSAnSVBGU19OT1RfQ09OTkVDVEVEJztcbmV4cG9ydCBjb25zdCBXRUIzX01FVEFNQVNLX1JFUVVJUkVEID0gJ1dFQjNfTUVUQU1BU0tfUkVRVUlSRUQnO1xuZXhwb3J0IGNvbnN0IFRSQU5TQUNUSU9OX1VOU1VDQ0VTU0ZVTCA9ICdUUkFOU0FDVElPTl9VTlNVQ0NFU1NGVUwnO1xuZXhwb3J0IGNvbnN0IEZBSUxVUkVfRVZFTlQgPSAnRkFJTFVSRV9FVkVOVCc7XG5cbmV4cG9ydCBkZWZhdWx0IChjb2RlLCAuLi5hcmdzKSA9PiB7XG4gICAgbGV0IG1lc3NhZ2UgPSAnVW5rbm93biBlcnJvcic7XG5cbiAgICBzd2l0Y2ggKGNvZGUpIHtcbiAgICAgICAgY2FzZSBTUEVDSUZJQ19BRERSRVNTX1JFUVVJUkVEOlxuICAgICAgICAgICAgbWVzc2FnZSA9IGBBZGRyZXNzIHJlcXVpcmVkICR7YXJnc1swXSA/ICcoJyArIGFyZ3NbMF0gKyAnKScgOiAnJ31gO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBPUFRJT05TX1JFUVVJUkVEOlxuICAgICAgICAgICAgbWVzc2FnZSA9ICdDb25maWcgb3B0aW9ucyBpcyByZXF1aXJlZCBhbmQgZXhwZWN0ZWQgdG8gYmUgYW4gb2JqZWN0JztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgV0VCM19SRVFVSVJFRDpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSAnV2ViMyBBUEkgcmVxdWlyZWQnO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBXRUIzX05PVF9DT05ORUNURUQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gJ1dlYjMgbm90IGNvbm5lY3RlZCB0byBwcm92aWRlcic7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFdFQjNfTUVUQU1BU0tfUkVRVUlSRUQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gJ01ldGFNYXNrIGlzIHJlcXVpcmVkIHRvIHBlcmZvcm0gdGhpcyBvcGVyYXRpb24nO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBDT05UUkFDVF9SRVFVSVJFRDpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgQ29udHJhY3QgXCIke2FyZ3NbMF19XCIgaXMgcmVxdWlyZWRgO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBBRERSRVNTX1JFUVVJUkVEOlxuICAgICAgICAgICAgbWVzc2FnZSA9IGBBZGRyZXNzIG9mIFwiJHthcmdzWzBdfVwiIGNvbnRyYWN0IGlzIHJlcXVpcmVkYDtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgSVBGU19SRVFVSVJFRDpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSAnSVBGUyBBUEkgcmVxdWlyZWQnO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBJUEZTX05PVF9DT05ORUNURUQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gJ05vIGNvbm5lY3Rpb24gdG8gSVBGUyBzZXJ2ZXInO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBUUkFOU0FDVElPTl9VTlNVQ0NFU1NGVUw6XG4gICAgICAgICAgICBtZXNzYWdlID0gJ1RyYW5zYWN0aW9uIHdhcyB1bnN1Y2Nlc3NmdWwnO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBGQUlMVVJFX0VWRU5UOlxuICAgICAgICAgICAgbWVzc2FnZSA9ICdDb250cmFjdCByZXR1cm5zIGFuIGZhaWx1cmUgZXZlbnQnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY29uc3QgZXJyID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIGVyci5jb2RlID0gY29kZSB8fCAnVU5LTk9XTic7XG4gICAgZXJyLmFyZ3MgPSBhcmdzO1xuICAgIHJldHVybiBlcnI7XG59O1xuIl19