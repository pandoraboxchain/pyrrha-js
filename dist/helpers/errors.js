/**
 * Errors definition and helpers
 * This file it is a part of the Pandora Pyrrha Javascript library
 * 
 * @file errors.js
 * @author Kostiantyn Smyrnov <kostysh@gmail.com>
 * @date 2018
 */

'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.default = exports.WEB3_METAMASK_REQUIRED = exports.IPFS_NOT_CONNECTED = exports.IPFS_REQUIRED = exports.ADDRESS_REQUIRED = exports.CONTRACT_REQUIRED = exports.WEB3_NOT_CONNECTED = exports.WEB3_REQUIRED = void 0;

const WEB3_REQUIRED = 'WEB3_REQUIRED';exports.WEB3_REQUIRED = WEB3_REQUIRED;
const WEB3_NOT_CONNECTED = 'WEB3_NOT_CONNECTED';exports.WEB3_NOT_CONNECTED = WEB3_NOT_CONNECTED;
const CONTRACT_REQUIRED = 'CONTRACT_REQUIRED';exports.CONTRACT_REQUIRED = CONTRACT_REQUIRED;
const ADDRESS_REQUIRED = 'ADDRESS_REQUIRED';exports.ADDRESS_REQUIRED = ADDRESS_REQUIRED;
const IPFS_REQUIRED = 'IPFS_REQUIRED';exports.IPFS_REQUIRED = IPFS_REQUIRED;
const IPFS_NOT_CONNECTED = 'IPFS_NOT_CONNECTED';exports.IPFS_NOT_CONNECTED = IPFS_NOT_CONNECTED;
const WEB3_METAMASK_REQUIRED = 'WEB3_METAMASK_REQUIRED';exports.WEB3_METAMASK_REQUIRED = WEB3_METAMASK_REQUIRED;var _default =

(code, ...args) => {
  let message = 'Unknown error';

  switch (code) {
    case WEB3_REQUIRED:
      message = 'Web3 API required';
      break;

    case WEB3_NOT_CONNECTED:
      message = 'Web3 not connected to provider';
      break;

    case WEB3_METAMASK_REQUIRED:
      message = 'MetaMask is required to perform this operation';
      break;

    case CONTRACT_REQUIRED:
      message = `Contract "${args[0]}" is required`;
      break;

    case ADDRESS_REQUIRED:
      message = `Address of "${args[0]}" contract is required`;
      break;

    case IPFS_REQUIRED:
      message = 'IPFS API required';
      break;

    case IPFS_NOT_CONNECTED:
      message = 'No connection to IPFS server';}


  const err = new Error(message);
  err.code = code || 'UNKNOWN';
  return err;
};exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2Vycm9ycy5qcyJdLCJuYW1lcyI6WyJXRUIzX1JFUVVJUkVEIiwiV0VCM19OT1RfQ09OTkVDVEVEIiwiQ09OVFJBQ1RfUkVRVUlSRUQiLCJBRERSRVNTX1JFUVVJUkVEIiwiSVBGU19SRVFVSVJFRCIsIklQRlNfTk9UX0NPTk5FQ1RFRCIsIldFQjNfTUVUQU1BU0tfUkVRVUlSRUQiLCJjb2RlIiwiYXJncyIsIm1lc3NhZ2UiLCJlcnIiLCJFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQVNBLGE7O0FBRU8sTUFBTUEsZ0JBQWdCLGVBQXRCLEM7QUFDQSxNQUFNQyxxQkFBcUIsb0JBQTNCLEM7QUFDQSxNQUFNQyxvQkFBb0IsbUJBQTFCLEM7QUFDQSxNQUFNQyxtQkFBbUIsa0JBQXpCLEM7QUFDQSxNQUFNQyxnQkFBZ0IsZUFBdEIsQztBQUNBLE1BQU1DLHFCQUFxQixvQkFBM0IsQztBQUNBLE1BQU1DLHlCQUF5Qix3QkFBL0IsQzs7QUFFUSxDQUFDQyxJQUFELEVBQU8sR0FBR0MsSUFBVixLQUFtQjtBQUM5QixNQUFJQyxVQUFVLGVBQWQ7O0FBRUEsVUFBUUYsSUFBUjtBQUNJLFNBQUtQLGFBQUw7QUFDSVMsZ0JBQVUsbUJBQVY7QUFDQTs7QUFFSixTQUFLUixrQkFBTDtBQUNJUSxnQkFBVSxnQ0FBVjtBQUNBOztBQUVKLFNBQUtILHNCQUFMO0FBQ0lHLGdCQUFVLGdEQUFWO0FBQ0E7O0FBRUosU0FBS1AsaUJBQUw7QUFDSU8sZ0JBQVcsYUFBWUQsS0FBSyxDQUFMLENBQVEsZUFBL0I7QUFDQTs7QUFFSixTQUFLTCxnQkFBTDtBQUNJTSxnQkFBVyxlQUFjRCxLQUFLLENBQUwsQ0FBUSx3QkFBakM7QUFDQTs7QUFFSixTQUFLSixhQUFMO0FBQ0lLLGdCQUFVLG1CQUFWO0FBQ0E7O0FBRUosU0FBS0osa0JBQUw7QUFDSUksZ0JBQVUsOEJBQVYsQ0ExQlI7OztBQTZCQSxRQUFNQyxNQUFNLElBQUlDLEtBQUosQ0FBVUYsT0FBVixDQUFaO0FBQ0FDLE1BQUlILElBQUosR0FBV0EsUUFBUSxTQUFuQjtBQUNBLFNBQU9HLEdBQVA7QUFDSCxDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFcnJvcnMgZGVmaW5pdGlvbiBhbmQgaGVscGVyc1xuICogVGhpcyBmaWxlIGl0IGlzIGEgcGFydCBvZiB0aGUgUGFuZG9yYSBQeXJyaGEgSmF2YXNjcmlwdCBsaWJyYXJ5XG4gKiBcbiAqIEBmaWxlIGVycm9ycy5qc1xuICogQGF1dGhvciBLb3N0aWFudHluIFNteXJub3YgPGtvc3R5c2hAZ21haWwuY29tPlxuICogQGRhdGUgMjAxOFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGNvbnN0IFdFQjNfUkVRVUlSRUQgPSAnV0VCM19SRVFVSVJFRCc7XG5leHBvcnQgY29uc3QgV0VCM19OT1RfQ09OTkVDVEVEID0gJ1dFQjNfTk9UX0NPTk5FQ1RFRCc7XG5leHBvcnQgY29uc3QgQ09OVFJBQ1RfUkVRVUlSRUQgPSAnQ09OVFJBQ1RfUkVRVUlSRUQnO1xuZXhwb3J0IGNvbnN0IEFERFJFU1NfUkVRVUlSRUQgPSAnQUREUkVTU19SRVFVSVJFRCc7XG5leHBvcnQgY29uc3QgSVBGU19SRVFVSVJFRCA9ICdJUEZTX1JFUVVJUkVEJztcbmV4cG9ydCBjb25zdCBJUEZTX05PVF9DT05ORUNURUQgPSAnSVBGU19OT1RfQ09OTkVDVEVEJztcbmV4cG9ydCBjb25zdCBXRUIzX01FVEFNQVNLX1JFUVVJUkVEID0gJ1dFQjNfTUVUQU1BU0tfUkVRVUlSRUQnO1xuXG5leHBvcnQgZGVmYXVsdCAoY29kZSwgLi4uYXJncykgPT4ge1xuICAgIGxldCBtZXNzYWdlID0gJ1Vua25vd24gZXJyb3InO1xuICAgIFxuICAgIHN3aXRjaCAoY29kZSkge1xuICAgICAgICBjYXNlIFdFQjNfUkVRVUlSRUQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gJ1dlYjMgQVBJIHJlcXVpcmVkJztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgV0VCM19OT1RfQ09OTkVDVEVEOlxuICAgICAgICAgICAgbWVzc2FnZSA9ICdXZWIzIG5vdCBjb25uZWN0ZWQgdG8gcHJvdmlkZXInO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBXRUIzX01FVEFNQVNLX1JFUVVJUkVEOlxuICAgICAgICAgICAgbWVzc2FnZSA9ICdNZXRhTWFzayBpcyByZXF1aXJlZCB0byBwZXJmb3JtIHRoaXMgb3BlcmF0aW9uJztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQ09OVFJBQ1RfUkVRVUlSRUQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gYENvbnRyYWN0IFwiJHthcmdzWzBdfVwiIGlzIHJlcXVpcmVkYDtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQUREUkVTU19SRVFVSVJFRDpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgQWRkcmVzcyBvZiBcIiR7YXJnc1swXX1cIiBjb250cmFjdCBpcyByZXF1aXJlZGA7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIElQRlNfUkVRVUlSRUQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gJ0lQRlMgQVBJIHJlcXVpcmVkJztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgSVBGU19OT1RfQ09OTkVDVEVEOlxuICAgICAgICAgICAgbWVzc2FnZSA9ICdObyBjb25uZWN0aW9uIHRvIElQRlMgc2VydmVyJztcbiAgICB9XG5cbiAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgZXJyLmNvZGUgPSBjb2RlIHx8ICdVTktOT1dOJztcbiAgICByZXR1cm4gZXJyO1xufTtcbiJdfQ==