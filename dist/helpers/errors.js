/**
 * Errors definition and helpers
 * This file it is a part of the Pandora Pyrrha Javascript library
 * 
 * @file errors.js
 * @author Kostiantyn Smyrnov <kostysh@gmail.com>
 * @date 2018
 */
'use strict';

require("core-js/modules/es6.object.define-property");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PJS_REQUIRED = exports.EXPECT_TYPE_OPTIONS_REQUIRED = exports.EXPECT_NOT_A_MEMBER = exports.FAILURE_EVENT = exports.TRANSACTION_UNSUCCESSFUL = exports.WEB3_METAMASK_REQUIRED = exports.IPFS_NOT_CONNECTED = exports.IPFS_REQUIRED = exports.CONTRACT_REQUIRED = exports.WEB3_CONNECTION_TIMEOUT = exports.WEB3_NOT_CONNECTED = exports.WEB3_REQUIRED = exports.ADDRESS_REQUIRED = exports.WRONG_TYPE = exports.OPTIONS_REQUIRED = void 0;
var OPTIONS_REQUIRED = 'OPTIONS_REQUIRED';
exports.OPTIONS_REQUIRED = OPTIONS_REQUIRED;
var WRONG_TYPE = 'WRONG_TYPE';
exports.WRONG_TYPE = WRONG_TYPE;
var ADDRESS_REQUIRED = 'ADDRESS_REQUIRED';
exports.ADDRESS_REQUIRED = ADDRESS_REQUIRED;
var WEB3_REQUIRED = 'WEB3_REQUIRED';
exports.WEB3_REQUIRED = WEB3_REQUIRED;
var WEB3_NOT_CONNECTED = 'WEB3_NOT_CONNECTED';
exports.WEB3_NOT_CONNECTED = WEB3_NOT_CONNECTED;
var WEB3_CONNECTION_TIMEOUT = 'WEB3_CONNECTION_TIMEOUT';
exports.WEB3_CONNECTION_TIMEOUT = WEB3_CONNECTION_TIMEOUT;
var CONTRACT_REQUIRED = 'CONTRACT_REQUIRED';
exports.CONTRACT_REQUIRED = CONTRACT_REQUIRED;
var IPFS_REQUIRED = 'IPFS_REQUIRED';
exports.IPFS_REQUIRED = IPFS_REQUIRED;
var IPFS_NOT_CONNECTED = 'IPFS_NOT_CONNECTED';
exports.IPFS_NOT_CONNECTED = IPFS_NOT_CONNECTED;
var WEB3_METAMASK_REQUIRED = 'WEB3_METAMASK_REQUIRED';
exports.WEB3_METAMASK_REQUIRED = WEB3_METAMASK_REQUIRED;
var TRANSACTION_UNSUCCESSFUL = 'TRANSACTION_UNSUCCESSFUL';
exports.TRANSACTION_UNSUCCESSFUL = TRANSACTION_UNSUCCESSFUL;
var FAILURE_EVENT = 'FAILURE_EVENT';
exports.FAILURE_EVENT = FAILURE_EVENT;
var EXPECT_NOT_A_MEMBER = 'EXPECT_NOT_A_MEMBER';
exports.EXPECT_NOT_A_MEMBER = EXPECT_NOT_A_MEMBER;
var EXPECT_TYPE_OPTIONS_REQUIRED = 'EXPECT_TYPE_OPTIONS_REQUIRED';
exports.EXPECT_TYPE_OPTIONS_REQUIRED = EXPECT_TYPE_OPTIONS_REQUIRED;
var PJS_REQUIRED = 'PJS_REQUIRED';
exports.PJS_REQUIRED = PJS_REQUIRED;

var _default = function _default(code) {
  var message = 'Unknown error';

  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  switch (code) {
    case OPTIONS_REQUIRED:
      message = 'Config options is required and expected to be an object';
      break;

    case WRONG_TYPE:
      message = "Wrong property type. Expected '".concat(args[0], "' to be: '").concat(args[1], "', but got: '").concat(args[2], "'");
      break;

    case WEB3_REQUIRED:
      message = 'Web3 API required';
      break;

    case WEB3_NOT_CONNECTED:
      message = 'Web3 not connected to provider';
      break;

    case WEB3_CONNECTION_TIMEOUT:
      message = "Websocket connection timeout (".concat(args[0], "ms) exceeded");
      break;

    case WEB3_METAMASK_REQUIRED:
      message = 'MetaMask is required to perform this operation';
      break;

    case CONTRACT_REQUIRED:
      message = "Contract '".concat(args[0], "' is required");
      break;

    case ADDRESS_REQUIRED:
      message = "Address of '".concat(args[3] || args[0], "' is required. Wrong ethereum address: ").concat(args[2]);
      break;

    case IPFS_REQUIRED:
      message = 'IPFS API required';
      break;

    case IPFS_NOT_CONNECTED:
      message = 'No connection to IPFS server';
      break;

    case TRANSACTION_UNSUCCESSFUL:
      message = 'Transaction was unsuccessful';
      break;

    case FAILURE_EVENT:
      message = 'Contract returns an failure event';
      break;
  }

  var err = new Error(message);
  err.code = code || 'UNKNOWN';
  err.args = args;
  return err;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2Vycm9ycy5qcyJdLCJuYW1lcyI6WyJPUFRJT05TX1JFUVVJUkVEIiwiV1JPTkdfVFlQRSIsIkFERFJFU1NfUkVRVUlSRUQiLCJXRUIzX1JFUVVJUkVEIiwiV0VCM19OT1RfQ09OTkVDVEVEIiwiV0VCM19DT05ORUNUSU9OX1RJTUVPVVQiLCJDT05UUkFDVF9SRVFVSVJFRCIsIklQRlNfUkVRVUlSRUQiLCJJUEZTX05PVF9DT05ORUNURUQiLCJXRUIzX01FVEFNQVNLX1JFUVVJUkVEIiwiVFJBTlNBQ1RJT05fVU5TVUNDRVNTRlVMIiwiRkFJTFVSRV9FVkVOVCIsIkVYUEVDVF9OT1RfQV9NRU1CRVIiLCJFWFBFQ1RfVFlQRV9PUFRJT05TX1JFUVVJUkVEIiwiUEpTX1JFUVVJUkVEIiwiY29kZSIsIm1lc3NhZ2UiLCJhcmdzIiwiZXJyIiwiRXJyb3IiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQVNBOzs7Ozs7OztBQUVPLElBQU1BLGdCQUFnQixHQUFHLGtCQUF6Qjs7QUFDQSxJQUFNQyxVQUFVLEdBQUcsWUFBbkI7O0FBQ0EsSUFBTUMsZ0JBQWdCLEdBQUcsa0JBQXpCOztBQUNBLElBQU1DLGFBQWEsR0FBRyxlQUF0Qjs7QUFDQSxJQUFNQyxrQkFBa0IsR0FBRyxvQkFBM0I7O0FBQ0EsSUFBTUMsdUJBQXVCLEdBQUcseUJBQWhDOztBQUNBLElBQU1DLGlCQUFpQixHQUFHLG1CQUExQjs7QUFDQSxJQUFNQyxhQUFhLEdBQUcsZUFBdEI7O0FBQ0EsSUFBTUMsa0JBQWtCLEdBQUcsb0JBQTNCOztBQUNBLElBQU1DLHNCQUFzQixHQUFHLHdCQUEvQjs7QUFDQSxJQUFNQyx3QkFBd0IsR0FBRywwQkFBakM7O0FBQ0EsSUFBTUMsYUFBYSxHQUFHLGVBQXRCOztBQUNBLElBQU1DLG1CQUFtQixHQUFHLHFCQUE1Qjs7QUFDQSxJQUFNQyw0QkFBNEIsR0FBRyw4QkFBckM7O0FBQ0EsSUFBTUMsWUFBWSxHQUFHLGNBQXJCOzs7ZUFFUSxrQkFBQ0MsSUFBRCxFQUFtQjtBQUM5QixNQUFJQyxPQUFPLEdBQUcsZUFBZDs7QUFEOEIsb0NBQVRDLElBQVM7QUFBVEEsSUFBQUEsSUFBUztBQUFBOztBQUc5QixVQUFRRixJQUFSO0FBQ0ksU0FBS2YsZ0JBQUw7QUFDSWdCLE1BQUFBLE9BQU8sR0FBRyx5REFBVjtBQUNBOztBQUVKLFNBQUtmLFVBQUw7QUFDSWUsTUFBQUEsT0FBTyw0Q0FBcUNDLElBQUksQ0FBQyxDQUFELENBQXpDLHVCQUF5REEsSUFBSSxDQUFDLENBQUQsQ0FBN0QsMEJBQWdGQSxJQUFJLENBQUMsQ0FBRCxDQUFwRixNQUFQO0FBQ0E7O0FBRUosU0FBS2QsYUFBTDtBQUNJYSxNQUFBQSxPQUFPLEdBQUcsbUJBQVY7QUFDQTs7QUFFSixTQUFLWixrQkFBTDtBQUNJWSxNQUFBQSxPQUFPLEdBQUcsZ0NBQVY7QUFDQTs7QUFFSixTQUFLWCx1QkFBTDtBQUNJVyxNQUFBQSxPQUFPLDJDQUFvQ0MsSUFBSSxDQUFDLENBQUQsQ0FBeEMsaUJBQVA7QUFDQTs7QUFFSixTQUFLUixzQkFBTDtBQUNJTyxNQUFBQSxPQUFPLEdBQUcsZ0RBQVY7QUFDQTs7QUFFSixTQUFLVixpQkFBTDtBQUNJVSxNQUFBQSxPQUFPLHVCQUFnQkMsSUFBSSxDQUFDLENBQUQsQ0FBcEIsa0JBQVA7QUFDQTs7QUFFSixTQUFLZixnQkFBTDtBQUNJYyxNQUFBQSxPQUFPLHlCQUFrQkMsSUFBSSxDQUFDLENBQUQsQ0FBSixJQUFXQSxJQUFJLENBQUMsQ0FBRCxDQUFqQyxvREFBOEVBLElBQUksQ0FBQyxDQUFELENBQWxGLENBQVA7QUFDQTs7QUFFSixTQUFLVixhQUFMO0FBQ0lTLE1BQUFBLE9BQU8sR0FBRyxtQkFBVjtBQUNBOztBQUVKLFNBQUtSLGtCQUFMO0FBQ0lRLE1BQUFBLE9BQU8sR0FBRyw4QkFBVjtBQUNBOztBQUVKLFNBQUtOLHdCQUFMO0FBQ0lNLE1BQUFBLE9BQU8sR0FBRyw4QkFBVjtBQUNBOztBQUVKLFNBQUtMLGFBQUw7QUFDSUssTUFBQUEsT0FBTyxHQUFHLG1DQUFWO0FBQ0E7QUEvQ1I7O0FBa0RBLE1BQU1FLEdBQUcsR0FBRyxJQUFJQyxLQUFKLENBQVVILE9BQVYsQ0FBWjtBQUNBRSxFQUFBQSxHQUFHLENBQUNILElBQUosR0FBV0EsSUFBSSxJQUFJLFNBQW5CO0FBQ0FHLEVBQUFBLEdBQUcsQ0FBQ0QsSUFBSixHQUFXQSxJQUFYO0FBQ0EsU0FBT0MsR0FBUDtBQUNILEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEVycm9ycyBkZWZpbml0aW9uIGFuZCBoZWxwZXJzXG4gKiBUaGlzIGZpbGUgaXQgaXMgYSBwYXJ0IG9mIHRoZSBQYW5kb3JhIFB5cnJoYSBKYXZhc2NyaXB0IGxpYnJhcnlcbiAqIFxuICogQGZpbGUgZXJyb3JzLmpzXG4gKiBAYXV0aG9yIEtvc3RpYW50eW4gU215cm5vdiA8a29zdHlzaEBnbWFpbC5jb20+XG4gKiBAZGF0ZSAyMDE4XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgY29uc3QgT1BUSU9OU19SRVFVSVJFRCA9ICdPUFRJT05TX1JFUVVJUkVEJztcbmV4cG9ydCBjb25zdCBXUk9OR19UWVBFID0gJ1dST05HX1RZUEUnO1xuZXhwb3J0IGNvbnN0IEFERFJFU1NfUkVRVUlSRUQgPSAnQUREUkVTU19SRVFVSVJFRCc7XG5leHBvcnQgY29uc3QgV0VCM19SRVFVSVJFRCA9ICdXRUIzX1JFUVVJUkVEJztcbmV4cG9ydCBjb25zdCBXRUIzX05PVF9DT05ORUNURUQgPSAnV0VCM19OT1RfQ09OTkVDVEVEJztcbmV4cG9ydCBjb25zdCBXRUIzX0NPTk5FQ1RJT05fVElNRU9VVCA9ICdXRUIzX0NPTk5FQ1RJT05fVElNRU9VVCc7XG5leHBvcnQgY29uc3QgQ09OVFJBQ1RfUkVRVUlSRUQgPSAnQ09OVFJBQ1RfUkVRVUlSRUQnO1xuZXhwb3J0IGNvbnN0IElQRlNfUkVRVUlSRUQgPSAnSVBGU19SRVFVSVJFRCc7XG5leHBvcnQgY29uc3QgSVBGU19OT1RfQ09OTkVDVEVEID0gJ0lQRlNfTk9UX0NPTk5FQ1RFRCc7XG5leHBvcnQgY29uc3QgV0VCM19NRVRBTUFTS19SRVFVSVJFRCA9ICdXRUIzX01FVEFNQVNLX1JFUVVJUkVEJztcbmV4cG9ydCBjb25zdCBUUkFOU0FDVElPTl9VTlNVQ0NFU1NGVUwgPSAnVFJBTlNBQ1RJT05fVU5TVUNDRVNTRlVMJztcbmV4cG9ydCBjb25zdCBGQUlMVVJFX0VWRU5UID0gJ0ZBSUxVUkVfRVZFTlQnO1xuZXhwb3J0IGNvbnN0IEVYUEVDVF9OT1RfQV9NRU1CRVIgPSAnRVhQRUNUX05PVF9BX01FTUJFUic7XG5leHBvcnQgY29uc3QgRVhQRUNUX1RZUEVfT1BUSU9OU19SRVFVSVJFRCA9ICdFWFBFQ1RfVFlQRV9PUFRJT05TX1JFUVVJUkVEJztcbmV4cG9ydCBjb25zdCBQSlNfUkVRVUlSRUQgPSAnUEpTX1JFUVVJUkVEJztcblxuZXhwb3J0IGRlZmF1bHQgKGNvZGUsIC4uLmFyZ3MpID0+IHtcbiAgICBsZXQgbWVzc2FnZSA9ICdVbmtub3duIGVycm9yJztcbiAgICAgICAgXG4gICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICAgIGNhc2UgT1BUSU9OU19SRVFVSVJFRDpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSAnQ29uZmlnIG9wdGlvbnMgaXMgcmVxdWlyZWQgYW5kIGV4cGVjdGVkIHRvIGJlIGFuIG9iamVjdCc7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFdST05HX1RZUEU6XG4gICAgICAgICAgICBtZXNzYWdlID0gYFdyb25nIHByb3BlcnR5IHR5cGUuIEV4cGVjdGVkICcke2FyZ3NbMF19JyB0byBiZTogJyR7YXJnc1sxXX0nLCBidXQgZ290OiAnJHthcmdzWzJdfSdgO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBXRUIzX1JFUVVJUkVEOlxuICAgICAgICAgICAgbWVzc2FnZSA9ICdXZWIzIEFQSSByZXF1aXJlZCc7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFdFQjNfTk9UX0NPTk5FQ1RFRDpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSAnV2ViMyBub3QgY29ubmVjdGVkIHRvIHByb3ZpZGVyJztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgV0VCM19DT05ORUNUSU9OX1RJTUVPVVQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gYFdlYnNvY2tldCBjb25uZWN0aW9uIHRpbWVvdXQgKCR7YXJnc1swXX1tcykgZXhjZWVkZWRgO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBXRUIzX01FVEFNQVNLX1JFUVVJUkVEOlxuICAgICAgICAgICAgbWVzc2FnZSA9ICdNZXRhTWFzayBpcyByZXF1aXJlZCB0byBwZXJmb3JtIHRoaXMgb3BlcmF0aW9uJztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQ09OVFJBQ1RfUkVRVUlSRUQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gYENvbnRyYWN0ICcke2FyZ3NbMF19JyBpcyByZXF1aXJlZGA7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIEFERFJFU1NfUkVRVUlSRUQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gYEFkZHJlc3Mgb2YgJyR7YXJnc1szXSB8fCBhcmdzWzBdfScgaXMgcmVxdWlyZWQuIFdyb25nIGV0aGVyZXVtIGFkZHJlc3M6ICR7YXJnc1syXX1gO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBJUEZTX1JFUVVJUkVEOlxuICAgICAgICAgICAgbWVzc2FnZSA9ICdJUEZTIEFQSSByZXF1aXJlZCc7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIElQRlNfTk9UX0NPTk5FQ1RFRDpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSAnTm8gY29ubmVjdGlvbiB0byBJUEZTIHNlcnZlcic7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFRSQU5TQUNUSU9OX1VOU1VDQ0VTU0ZVTDpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSAnVHJhbnNhY3Rpb24gd2FzIHVuc3VjY2Vzc2Z1bCc7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIEZBSUxVUkVfRVZFTlQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gJ0NvbnRyYWN0IHJldHVybnMgYW4gZmFpbHVyZSBldmVudCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgZXJyLmNvZGUgPSBjb2RlIHx8ICdVTktOT1dOJztcbiAgICBlcnIuYXJncyA9IGFyZ3M7XG4gICAgcmV0dXJuIGVycjtcbn07XG4iXX0=