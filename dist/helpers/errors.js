/**
 * Errors definition and helpers
 * This file it is a part of the Pandora Pyrrha Javascript library
 * 
 * @file errors.js
 * @author Kostiantyn Smyrnov <kostysh@gmail.com>
 * @date 2018
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WEB3_METAMASK_REQUIRED = exports.IPFS_NOT_CONNECTED = exports.IPFS_REQUIRED = exports.ADDRESS_REQUIRED = exports.CONTRACT_REQUIRED = exports.WEB3_NOT_CONNECTED = exports.WEB3_REQUIRED = void 0;
const WEB3_REQUIRED = 'WEB3_REQUIRED';
exports.WEB3_REQUIRED = WEB3_REQUIRED;
const WEB3_NOT_CONNECTED = 'WEB3_NOT_CONNECTED';
exports.WEB3_NOT_CONNECTED = WEB3_NOT_CONNECTED;
const CONTRACT_REQUIRED = 'CONTRACT_REQUIRED';
exports.CONTRACT_REQUIRED = CONTRACT_REQUIRED;
const ADDRESS_REQUIRED = 'ADDRESS_REQUIRED';
exports.ADDRESS_REQUIRED = ADDRESS_REQUIRED;
const IPFS_REQUIRED = 'IPFS_REQUIRED';
exports.IPFS_REQUIRED = IPFS_REQUIRED;
const IPFS_NOT_CONNECTED = 'IPFS_NOT_CONNECTED';
exports.IPFS_NOT_CONNECTED = IPFS_NOT_CONNECTED;
const WEB3_METAMASK_REQUIRED = 'WEB3_METAMASK_REQUIRED';
exports.WEB3_METAMASK_REQUIRED = WEB3_METAMASK_REQUIRED;

var _default = (code, ...args) => {
  let message = 'Unknown error';

  switch (code) {
    case WEB3_REQUIRED:
      message = 'Web3 API required';
      break;

    case WEB3_NOT_CONNECTED:
      message = 'Web3 not connected to provider';
      break;

    case WEB3_METAMASK_REQUIRED:
      message = 'MetaMask is required to perform this operation';
      break;

    case CONTRACT_REQUIRED:
      message = `Contract "${args[0]}" is required`;
      break;

    case ADDRESS_REQUIRED:
      message = `Address of "${args[0]}" contract is required`;
      break;

    case IPFS_REQUIRED:
      message = 'IPFS API required';
      break;

    case IPFS_NOT_CONNECTED:
      message = 'No connection to IPFS server';
  }

  const err = new Error(message);
  err.code = code || 'UNKNOWN';
  return err;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2Vycm9ycy5qcyJdLCJuYW1lcyI6WyJXRUIzX1JFUVVJUkVEIiwiV0VCM19OT1RfQ09OTkVDVEVEIiwiQ09OVFJBQ1RfUkVRVUlSRUQiLCJBRERSRVNTX1JFUVVJUkVEIiwiSVBGU19SRVFVSVJFRCIsIklQRlNfTk9UX0NPTk5FQ1RFRCIsIldFQjNfTUVUQU1BU0tfUkVRVUlSRUQiLCJjb2RlIiwiYXJncyIsIm1lc3NhZ2UiLCJlcnIiLCJFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBU0E7Ozs7OztBQUVPLE1BQU1BLGdCQUFnQixlQUF0Qjs7QUFDQSxNQUFNQyxxQkFBcUIsb0JBQTNCOztBQUNBLE1BQU1DLG9CQUFvQixtQkFBMUI7O0FBQ0EsTUFBTUMsbUJBQW1CLGtCQUF6Qjs7QUFDQSxNQUFNQyxnQkFBZ0IsZUFBdEI7O0FBQ0EsTUFBTUMscUJBQXFCLG9CQUEzQjs7QUFDQSxNQUFNQyx5QkFBeUIsd0JBQS9COzs7ZUFFUSxDQUFDQyxJQUFELEVBQU8sR0FBR0MsSUFBVixLQUFtQjtBQUM5QixNQUFJQyxVQUFVLGVBQWQ7O0FBRUEsVUFBUUYsSUFBUjtBQUNJLFNBQUtQLGFBQUw7QUFDSVMsZ0JBQVUsbUJBQVY7QUFDQTs7QUFFSixTQUFLUixrQkFBTDtBQUNJUSxnQkFBVSxnQ0FBVjtBQUNBOztBQUVKLFNBQUtILHNCQUFMO0FBQ0lHLGdCQUFVLGdEQUFWO0FBQ0E7O0FBRUosU0FBS1AsaUJBQUw7QUFDSU8sZ0JBQVcsYUFBWUQsS0FBSyxDQUFMLENBQVEsZUFBL0I7QUFDQTs7QUFFSixTQUFLTCxnQkFBTDtBQUNJTSxnQkFBVyxlQUFjRCxLQUFLLENBQUwsQ0FBUSx3QkFBakM7QUFDQTs7QUFFSixTQUFLSixhQUFMO0FBQ0lLLGdCQUFVLG1CQUFWO0FBQ0E7O0FBRUosU0FBS0osa0JBQUw7QUFDSUksZ0JBQVUsOEJBQVY7QUExQlI7O0FBNkJBLFFBQU1DLE1BQU0sSUFBSUMsS0FBSixDQUFVRixPQUFWLENBQVo7QUFDQUMsTUFBSUgsSUFBSixHQUFXQSxRQUFRLFNBQW5CO0FBQ0EsU0FBT0csR0FBUDtBQUNILEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEVycm9ycyBkZWZpbml0aW9uIGFuZCBoZWxwZXJzXG4gKiBUaGlzIGZpbGUgaXQgaXMgYSBwYXJ0IG9mIHRoZSBQYW5kb3JhIFB5cnJoYSBKYXZhc2NyaXB0IGxpYnJhcnlcbiAqIFxuICogQGZpbGUgZXJyb3JzLmpzXG4gKiBAYXV0aG9yIEtvc3RpYW50eW4gU215cm5vdiA8a29zdHlzaEBnbWFpbC5jb20+XG4gKiBAZGF0ZSAyMDE4XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgY29uc3QgV0VCM19SRVFVSVJFRCA9ICdXRUIzX1JFUVVJUkVEJztcbmV4cG9ydCBjb25zdCBXRUIzX05PVF9DT05ORUNURUQgPSAnV0VCM19OT1RfQ09OTkVDVEVEJztcbmV4cG9ydCBjb25zdCBDT05UUkFDVF9SRVFVSVJFRCA9ICdDT05UUkFDVF9SRVFVSVJFRCc7XG5leHBvcnQgY29uc3QgQUREUkVTU19SRVFVSVJFRCA9ICdBRERSRVNTX1JFUVVJUkVEJztcbmV4cG9ydCBjb25zdCBJUEZTX1JFUVVJUkVEID0gJ0lQRlNfUkVRVUlSRUQnO1xuZXhwb3J0IGNvbnN0IElQRlNfTk9UX0NPTk5FQ1RFRCA9ICdJUEZTX05PVF9DT05ORUNURUQnO1xuZXhwb3J0IGNvbnN0IFdFQjNfTUVUQU1BU0tfUkVRVUlSRUQgPSAnV0VCM19NRVRBTUFTS19SRVFVSVJFRCc7XG5cbmV4cG9ydCBkZWZhdWx0IChjb2RlLCAuLi5hcmdzKSA9PiB7XG4gICAgbGV0IG1lc3NhZ2UgPSAnVW5rbm93biBlcnJvcic7XG4gICAgXG4gICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICAgIGNhc2UgV0VCM19SRVFVSVJFRDpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSAnV2ViMyBBUEkgcmVxdWlyZWQnO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBXRUIzX05PVF9DT05ORUNURUQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gJ1dlYjMgbm90IGNvbm5lY3RlZCB0byBwcm92aWRlcic7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFdFQjNfTUVUQU1BU0tfUkVRVUlSRUQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gJ01ldGFNYXNrIGlzIHJlcXVpcmVkIHRvIHBlcmZvcm0gdGhpcyBvcGVyYXRpb24nO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBDT05UUkFDVF9SRVFVSVJFRDpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgQ29udHJhY3QgXCIke2FyZ3NbMF19XCIgaXMgcmVxdWlyZWRgO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBBRERSRVNTX1JFUVVJUkVEOlxuICAgICAgICAgICAgbWVzc2FnZSA9IGBBZGRyZXNzIG9mIFwiJHthcmdzWzBdfVwiIGNvbnRyYWN0IGlzIHJlcXVpcmVkYDtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgSVBGU19SRVFVSVJFRDpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSAnSVBGUyBBUEkgcmVxdWlyZWQnO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBJUEZTX05PVF9DT05ORUNURUQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gJ05vIGNvbm5lY3Rpb24gdG8gSVBGUyBzZXJ2ZXInO1xuICAgIH1cblxuICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICBlcnIuY29kZSA9IGNvZGUgfHwgJ1VOS05PV04nO1xuICAgIHJldHVybiBlcnI7XG59O1xuIl19