/**
 * Errors definition and helpers
 * This file it is a part of the Pandora Pyrrha Javascript library
 * 
 * @file errors.js
 * @author Kostiantyn Smyrnov <kostysh@gmail.com>
 * @date 2018
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.EXPECT_TYPE_OPTIONS_REQUIRED = exports.EXPECT_NOT_A_MEMBER = exports.FAILURE_EVENT = exports.TRANSACTION_UNSUCCESSFUL = exports.WEB3_METAMASK_REQUIRED = exports.IPFS_NOT_CONNECTED = exports.IPFS_REQUIRED = exports.CONTRACT_REQUIRED = exports.WEB3_NOT_CONNECTED = exports.WEB3_REQUIRED = exports.ADDRESS_REQUIRED = exports.WRONG_TYPE = exports.OPTIONS_REQUIRED = void 0;
const OPTIONS_REQUIRED = 'OPTIONS_REQUIRED';
exports.OPTIONS_REQUIRED = OPTIONS_REQUIRED;
const WRONG_TYPE = 'WRONG_TYPE';
exports.WRONG_TYPE = WRONG_TYPE;
const ADDRESS_REQUIRED = 'ADDRESS_REQUIRED';
exports.ADDRESS_REQUIRED = ADDRESS_REQUIRED;
const WEB3_REQUIRED = 'WEB3_REQUIRED';
exports.WEB3_REQUIRED = WEB3_REQUIRED;
const WEB3_NOT_CONNECTED = 'WEB3_NOT_CONNECTED';
exports.WEB3_NOT_CONNECTED = WEB3_NOT_CONNECTED;
const CONTRACT_REQUIRED = 'CONTRACT_REQUIRED';
exports.CONTRACT_REQUIRED = CONTRACT_REQUIRED;
const IPFS_REQUIRED = 'IPFS_REQUIRED';
exports.IPFS_REQUIRED = IPFS_REQUIRED;
const IPFS_NOT_CONNECTED = 'IPFS_NOT_CONNECTED';
exports.IPFS_NOT_CONNECTED = IPFS_NOT_CONNECTED;
const WEB3_METAMASK_REQUIRED = 'WEB3_METAMASK_REQUIRED';
exports.WEB3_METAMASK_REQUIRED = WEB3_METAMASK_REQUIRED;
const TRANSACTION_UNSUCCESSFUL = 'TRANSACTION_UNSUCCESSFUL';
exports.TRANSACTION_UNSUCCESSFUL = TRANSACTION_UNSUCCESSFUL;
const FAILURE_EVENT = 'FAILURE_EVENT';
exports.FAILURE_EVENT = FAILURE_EVENT;
const EXPECT_NOT_A_MEMBER = 'EXPECT_NOT_A_MEMBER';
exports.EXPECT_NOT_A_MEMBER = EXPECT_NOT_A_MEMBER;
const EXPECT_TYPE_OPTIONS_REQUIRED = 'EXPECT_TYPE_OPTIONS_REQUIRED';
exports.EXPECT_TYPE_OPTIONS_REQUIRED = EXPECT_TYPE_OPTIONS_REQUIRED;

var _default = (code, key, type, value, ...args) => {
  let message = 'Unknown error';

  switch (code) {
    case OPTIONS_REQUIRED:
      message = 'Config options is required and expected to be an object';
      break;

    case WRONG_TYPE:
      message = `Wrong property type. Expected '${key}' to be: '${type}', but got: '${value}'`;
      break;

    case WEB3_REQUIRED:
      message = 'Web3 API required';
      break;

    case WEB3_NOT_CONNECTED:
      message = 'Web3 not connected to provider';
      break;

    case WEB3_METAMASK_REQUIRED:
      message = 'MetaMask is required to perform this operation';
      break;

    case CONTRACT_REQUIRED:
      message = `Contract '${args[0]}' is required`;
      break;

    case ADDRESS_REQUIRED:
      message = `Address of '${args[0] || key}' is required. Wrong ethereum address: ${value}`;
      break;

    case IPFS_REQUIRED:
      message = 'IPFS API required';
      break;

    case IPFS_NOT_CONNECTED:
      message = 'No connection to IPFS server';
      break;

    case TRANSACTION_UNSUCCESSFUL:
      message = 'Transaction was unsuccessful';
      break;

    case FAILURE_EVENT:
      message = 'Contract returns an failure event';
      break;
  }

  const err = new Error(message);
  err.code = code || 'UNKNOWN';
  err.args = args;
  return err;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2Vycm9ycy5qcyJdLCJuYW1lcyI6WyJPUFRJT05TX1JFUVVJUkVEIiwiV1JPTkdfVFlQRSIsIkFERFJFU1NfUkVRVUlSRUQiLCJXRUIzX1JFUVVJUkVEIiwiV0VCM19OT1RfQ09OTkVDVEVEIiwiQ09OVFJBQ1RfUkVRVUlSRUQiLCJJUEZTX1JFUVVJUkVEIiwiSVBGU19OT1RfQ09OTkVDVEVEIiwiV0VCM19NRVRBTUFTS19SRVFVSVJFRCIsIlRSQU5TQUNUSU9OX1VOU1VDQ0VTU0ZVTCIsIkZBSUxVUkVfRVZFTlQiLCJFWFBFQ1RfTk9UX0FfTUVNQkVSIiwiRVhQRUNUX1RZUEVfT1BUSU9OU19SRVFVSVJFRCIsImNvZGUiLCJrZXkiLCJ0eXBlIiwidmFsdWUiLCJhcmdzIiwibWVzc2FnZSIsImVyciIsIkVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFTQTs7Ozs7O0FBRU8sTUFBTUEsbUJBQW1CLGtCQUF6Qjs7QUFDQSxNQUFNQyxhQUFhLFlBQW5COztBQUNBLE1BQU1DLG1CQUFtQixrQkFBekI7O0FBQ0EsTUFBTUMsZ0JBQWdCLGVBQXRCOztBQUNBLE1BQU1DLHFCQUFxQixvQkFBM0I7O0FBQ0EsTUFBTUMsb0JBQW9CLG1CQUExQjs7QUFDQSxNQUFNQyxnQkFBZ0IsZUFBdEI7O0FBQ0EsTUFBTUMscUJBQXFCLG9CQUEzQjs7QUFDQSxNQUFNQyx5QkFBeUIsd0JBQS9COztBQUNBLE1BQU1DLDJCQUEyQiwwQkFBakM7O0FBQ0EsTUFBTUMsZ0JBQWdCLGVBQXRCOztBQUNBLE1BQU1DLHNCQUFzQixxQkFBNUI7O0FBQ0EsTUFBTUMsK0JBQStCLDhCQUFyQzs7O2VBRVEsQ0FBQ0MsSUFBRCxFQUFPQyxHQUFQLEVBQVlDLElBQVosRUFBa0JDLEtBQWxCLEVBQXlCLEdBQUdDLElBQTVCLEtBQXFDO0FBQ2hELE1BQUlDLFVBQVUsZUFBZDs7QUFFQSxVQUFRTCxJQUFSO0FBQ0ksU0FBS2IsZ0JBQUw7QUFDSWtCLGdCQUFVLHlEQUFWO0FBQ0E7O0FBRUosU0FBS2pCLFVBQUw7QUFDSWlCLGdCQUFXLGtDQUFpQ0osR0FBSSxhQUFZQyxJQUFLLGdCQUFlQyxLQUFNLEdBQXRGO0FBQ0E7O0FBRUosU0FBS2IsYUFBTDtBQUNJZSxnQkFBVSxtQkFBVjtBQUNBOztBQUVKLFNBQUtkLGtCQUFMO0FBQ0ljLGdCQUFVLGdDQUFWO0FBQ0E7O0FBRUosU0FBS1Ysc0JBQUw7QUFDSVUsZ0JBQVUsZ0RBQVY7QUFDQTs7QUFFSixTQUFLYixpQkFBTDtBQUNJYSxnQkFBVyxhQUFZRCxLQUFLLENBQUwsQ0FBUSxlQUEvQjtBQUNBOztBQUVKLFNBQUtmLGdCQUFMO0FBQ0lnQixnQkFBVyxlQUFjRCxLQUFLLENBQUwsS0FBV0gsR0FBSSwwQ0FBeUNFLEtBQU0sRUFBdkY7QUFDQTs7QUFFSixTQUFLVixhQUFMO0FBQ0lZLGdCQUFVLG1CQUFWO0FBQ0E7O0FBRUosU0FBS1gsa0JBQUw7QUFDSVcsZ0JBQVUsOEJBQVY7QUFDQTs7QUFFSixTQUFLVCx3QkFBTDtBQUNJUyxnQkFBVSw4QkFBVjtBQUNBOztBQUVKLFNBQUtSLGFBQUw7QUFDSVEsZ0JBQVUsbUNBQVY7QUFDQTtBQTNDUjs7QUE4Q0EsUUFBTUMsTUFBTSxJQUFJQyxLQUFKLENBQVVGLE9BQVYsQ0FBWjtBQUNBQyxNQUFJTixJQUFKLEdBQVdBLFFBQVEsU0FBbkI7QUFDQU0sTUFBSUYsSUFBSixHQUFXQSxJQUFYO0FBQ0EsU0FBT0UsR0FBUDtBQUNILEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEVycm9ycyBkZWZpbml0aW9uIGFuZCBoZWxwZXJzXG4gKiBUaGlzIGZpbGUgaXQgaXMgYSBwYXJ0IG9mIHRoZSBQYW5kb3JhIFB5cnJoYSBKYXZhc2NyaXB0IGxpYnJhcnlcbiAqIFxuICogQGZpbGUgZXJyb3JzLmpzXG4gKiBAYXV0aG9yIEtvc3RpYW50eW4gU215cm5vdiA8a29zdHlzaEBnbWFpbC5jb20+XG4gKiBAZGF0ZSAyMDE4XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgY29uc3QgT1BUSU9OU19SRVFVSVJFRCA9ICdPUFRJT05TX1JFUVVJUkVEJztcbmV4cG9ydCBjb25zdCBXUk9OR19UWVBFID0gJ1dST05HX1RZUEUnO1xuZXhwb3J0IGNvbnN0IEFERFJFU1NfUkVRVUlSRUQgPSAnQUREUkVTU19SRVFVSVJFRCc7XG5leHBvcnQgY29uc3QgV0VCM19SRVFVSVJFRCA9ICdXRUIzX1JFUVVJUkVEJztcbmV4cG9ydCBjb25zdCBXRUIzX05PVF9DT05ORUNURUQgPSAnV0VCM19OT1RfQ09OTkVDVEVEJztcbmV4cG9ydCBjb25zdCBDT05UUkFDVF9SRVFVSVJFRCA9ICdDT05UUkFDVF9SRVFVSVJFRCc7XG5leHBvcnQgY29uc3QgSVBGU19SRVFVSVJFRCA9ICdJUEZTX1JFUVVJUkVEJztcbmV4cG9ydCBjb25zdCBJUEZTX05PVF9DT05ORUNURUQgPSAnSVBGU19OT1RfQ09OTkVDVEVEJztcbmV4cG9ydCBjb25zdCBXRUIzX01FVEFNQVNLX1JFUVVJUkVEID0gJ1dFQjNfTUVUQU1BU0tfUkVRVUlSRUQnO1xuZXhwb3J0IGNvbnN0IFRSQU5TQUNUSU9OX1VOU1VDQ0VTU0ZVTCA9ICdUUkFOU0FDVElPTl9VTlNVQ0NFU1NGVUwnO1xuZXhwb3J0IGNvbnN0IEZBSUxVUkVfRVZFTlQgPSAnRkFJTFVSRV9FVkVOVCc7XG5leHBvcnQgY29uc3QgRVhQRUNUX05PVF9BX01FTUJFUiA9ICdFWFBFQ1RfTk9UX0FfTUVNQkVSJztcbmV4cG9ydCBjb25zdCBFWFBFQ1RfVFlQRV9PUFRJT05TX1JFUVVJUkVEID0gJ0VYUEVDVF9UWVBFX09QVElPTlNfUkVRVUlSRUQnO1xuXG5leHBvcnQgZGVmYXVsdCAoY29kZSwga2V5LCB0eXBlLCB2YWx1ZSwgLi4uYXJncykgPT4ge1xuICAgIGxldCBtZXNzYWdlID0gJ1Vua25vd24gZXJyb3InO1xuICAgICAgICBcbiAgICBzd2l0Y2ggKGNvZGUpIHtcbiAgICAgICAgY2FzZSBPUFRJT05TX1JFUVVJUkVEOlxuICAgICAgICAgICAgbWVzc2FnZSA9ICdDb25maWcgb3B0aW9ucyBpcyByZXF1aXJlZCBhbmQgZXhwZWN0ZWQgdG8gYmUgYW4gb2JqZWN0JztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgV1JPTkdfVFlQRTpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgV3JvbmcgcHJvcGVydHkgdHlwZS4gRXhwZWN0ZWQgJyR7a2V5fScgdG8gYmU6ICcke3R5cGV9JywgYnV0IGdvdDogJyR7dmFsdWV9J2A7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFdFQjNfUkVRVUlSRUQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gJ1dlYjMgQVBJIHJlcXVpcmVkJztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgV0VCM19OT1RfQ09OTkVDVEVEOlxuICAgICAgICAgICAgbWVzc2FnZSA9ICdXZWIzIG5vdCBjb25uZWN0ZWQgdG8gcHJvdmlkZXInO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBXRUIzX01FVEFNQVNLX1JFUVVJUkVEOlxuICAgICAgICAgICAgbWVzc2FnZSA9ICdNZXRhTWFzayBpcyByZXF1aXJlZCB0byBwZXJmb3JtIHRoaXMgb3BlcmF0aW9uJztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQ09OVFJBQ1RfUkVRVUlSRUQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gYENvbnRyYWN0ICcke2FyZ3NbMF19JyBpcyByZXF1aXJlZGA7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIEFERFJFU1NfUkVRVUlSRUQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gYEFkZHJlc3Mgb2YgJyR7YXJnc1swXSB8fCBrZXl9JyBpcyByZXF1aXJlZC4gV3JvbmcgZXRoZXJldW0gYWRkcmVzczogJHt2YWx1ZX1gO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBJUEZTX1JFUVVJUkVEOlxuICAgICAgICAgICAgbWVzc2FnZSA9ICdJUEZTIEFQSSByZXF1aXJlZCc7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIElQRlNfTk9UX0NPTk5FQ1RFRDpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSAnTm8gY29ubmVjdGlvbiB0byBJUEZTIHNlcnZlcic7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFRSQU5TQUNUSU9OX1VOU1VDQ0VTU0ZVTDpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSAnVHJhbnNhY3Rpb24gd2FzIHVuc3VjY2Vzc2Z1bCc7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIEZBSUxVUkVfRVZFTlQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gJ0NvbnRyYWN0IHJldHVybnMgYW4gZmFpbHVyZSBldmVudCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgZXJyLmNvZGUgPSBjb2RlIHx8ICdVTktOT1dOJztcbiAgICBlcnIuYXJncyA9IGFyZ3M7XG4gICAgcmV0dXJuIGVycjtcbn07XG4iXX0=