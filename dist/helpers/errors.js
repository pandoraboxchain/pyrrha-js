/**
 * Errors definition and helpers
 * This file it is a part of the Pandora Pyrrha Javascript library
 * 
 * @file errors.js
 * @author Kostiantyn Smyrnov <kostysh@gmail.com>
 * @date 2018
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FAILURE_EVENT = exports.TRANSACTION_UNSUCCESSFUL = exports.WEB3_METAMASK_REQUIRED = exports.IPFS_NOT_CONNECTED = exports.IPFS_REQUIRED = exports.CONTRACT_REQUIRED = exports.WEB3_NOT_CONNECTED = exports.WEB3_REQUIRED = exports.ADDRESS_REQUIRED = exports.WRONG_TYPE = exports.OPTIONS_REQUIRED = void 0;
const OPTIONS_REQUIRED = 'OPTIONS_REQUIRED';
exports.OPTIONS_REQUIRED = OPTIONS_REQUIRED;
const WRONG_TYPE = 'WRONG_TYPE';
exports.WRONG_TYPE = WRONG_TYPE;
const ADDRESS_REQUIRED = 'ADDRESS_REQUIRED';
exports.ADDRESS_REQUIRED = ADDRESS_REQUIRED;
const WEB3_REQUIRED = 'WEB3_REQUIRED';
exports.WEB3_REQUIRED = WEB3_REQUIRED;
const WEB3_NOT_CONNECTED = 'WEB3_NOT_CONNECTED';
exports.WEB3_NOT_CONNECTED = WEB3_NOT_CONNECTED;
const CONTRACT_REQUIRED = 'CONTRACT_REQUIRED';
exports.CONTRACT_REQUIRED = CONTRACT_REQUIRED;
const IPFS_REQUIRED = 'IPFS_REQUIRED';
exports.IPFS_REQUIRED = IPFS_REQUIRED;
const IPFS_NOT_CONNECTED = 'IPFS_NOT_CONNECTED';
exports.IPFS_NOT_CONNECTED = IPFS_NOT_CONNECTED;
const WEB3_METAMASK_REQUIRED = 'WEB3_METAMASK_REQUIRED';
exports.WEB3_METAMASK_REQUIRED = WEB3_METAMASK_REQUIRED;
const TRANSACTION_UNSUCCESSFUL = 'TRANSACTION_UNSUCCESSFUL';
exports.TRANSACTION_UNSUCCESSFUL = TRANSACTION_UNSUCCESSFUL;
const FAILURE_EVENT = 'FAILURE_EVENT';
exports.FAILURE_EVENT = FAILURE_EVENT;

var _default = (code, key, type, value, ...args) => {
  let message = 'Unknown error';

  switch (code) {
    case OPTIONS_REQUIRED:
      message = 'Config options is required and expected to be an object';
      break;

    case WRONG_TYPE:
      message = `Wrong property type. Expected '${key}' to be: '${type}', but got: '${value}'`;
      break;

    case WEB3_REQUIRED:
      message = 'Web3 API required';
      break;

    case WEB3_NOT_CONNECTED:
      message = 'Web3 not connected to provider';
      break;

    case WEB3_METAMASK_REQUIRED:
      message = 'MetaMask is required to perform this operation';
      break;

    case CONTRACT_REQUIRED:
      message = `Contract '${args[0]}' is required`;
      break;

    case ADDRESS_REQUIRED:
      message = `Address of '${args[0] || key}' is required. Wrong ethereum address: ${value}`;
      break;

    case IPFS_REQUIRED:
      message = 'IPFS API required';
      break;

    case IPFS_NOT_CONNECTED:
      message = 'No connection to IPFS server';
      break;

    case TRANSACTION_UNSUCCESSFUL:
      message = 'Transaction was unsuccessful';
      break;

    case FAILURE_EVENT:
      message = 'Contract returns an failure event';
      break;
  }

  const err = new Error(message);
  err.code = code || 'UNKNOWN';
  err.args = args;
  return err;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2Vycm9ycy5qcyJdLCJuYW1lcyI6WyJPUFRJT05TX1JFUVVJUkVEIiwiV1JPTkdfVFlQRSIsIkFERFJFU1NfUkVRVUlSRUQiLCJXRUIzX1JFUVVJUkVEIiwiV0VCM19OT1RfQ09OTkVDVEVEIiwiQ09OVFJBQ1RfUkVRVUlSRUQiLCJJUEZTX1JFUVVJUkVEIiwiSVBGU19OT1RfQ09OTkVDVEVEIiwiV0VCM19NRVRBTUFTS19SRVFVSVJFRCIsIlRSQU5TQUNUSU9OX1VOU1VDQ0VTU0ZVTCIsIkZBSUxVUkVfRVZFTlQiLCJjb2RlIiwia2V5IiwidHlwZSIsInZhbHVlIiwiYXJncyIsIm1lc3NhZ2UiLCJlcnIiLCJFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBU0E7Ozs7OztBQUVPLE1BQU1BLG1CQUFtQixrQkFBekI7O0FBQ0EsTUFBTUMsYUFBYSxZQUFuQjs7QUFDQSxNQUFNQyxtQkFBbUIsa0JBQXpCOztBQUNBLE1BQU1DLGdCQUFnQixlQUF0Qjs7QUFDQSxNQUFNQyxxQkFBcUIsb0JBQTNCOztBQUNBLE1BQU1DLG9CQUFvQixtQkFBMUI7O0FBQ0EsTUFBTUMsZ0JBQWdCLGVBQXRCOztBQUNBLE1BQU1DLHFCQUFxQixvQkFBM0I7O0FBQ0EsTUFBTUMseUJBQXlCLHdCQUEvQjs7QUFDQSxNQUFNQywyQkFBMkIsMEJBQWpDOztBQUNBLE1BQU1DLGdCQUFnQixlQUF0Qjs7O2VBRVEsQ0FBQ0MsSUFBRCxFQUFPQyxHQUFQLEVBQVlDLElBQVosRUFBa0JDLEtBQWxCLEVBQXlCLEdBQUdDLElBQTVCLEtBQXFDO0FBQ2hELE1BQUlDLFVBQVUsZUFBZDs7QUFFQSxVQUFRTCxJQUFSO0FBQ0ksU0FBS1gsZ0JBQUw7QUFDSWdCLGdCQUFVLHlEQUFWO0FBQ0E7O0FBRUosU0FBS2YsVUFBTDtBQUNJZSxnQkFBVyxrQ0FBaUNKLEdBQUksYUFBWUMsSUFBSyxnQkFBZUMsS0FBTSxHQUF0RjtBQUNBOztBQUVKLFNBQUtYLGFBQUw7QUFDSWEsZ0JBQVUsbUJBQVY7QUFDQTs7QUFFSixTQUFLWixrQkFBTDtBQUNJWSxnQkFBVSxnQ0FBVjtBQUNBOztBQUVKLFNBQUtSLHNCQUFMO0FBQ0lRLGdCQUFVLGdEQUFWO0FBQ0E7O0FBRUosU0FBS1gsaUJBQUw7QUFDSVcsZ0JBQVcsYUFBWUQsS0FBSyxDQUFMLENBQVEsZUFBL0I7QUFDQTs7QUFFSixTQUFLYixnQkFBTDtBQUNJYyxnQkFBVyxlQUFjRCxLQUFLLENBQUwsS0FBV0gsR0FBSSwwQ0FBeUNFLEtBQU0sRUFBdkY7QUFDQTs7QUFFSixTQUFLUixhQUFMO0FBQ0lVLGdCQUFVLG1CQUFWO0FBQ0E7O0FBRUosU0FBS1Qsa0JBQUw7QUFDSVMsZ0JBQVUsOEJBQVY7QUFDQTs7QUFFSixTQUFLUCx3QkFBTDtBQUNJTyxnQkFBVSw4QkFBVjtBQUNBOztBQUVKLFNBQUtOLGFBQUw7QUFDSU0sZ0JBQVUsbUNBQVY7QUFDQTtBQTNDUjs7QUE4Q0EsUUFBTUMsTUFBTSxJQUFJQyxLQUFKLENBQVVGLE9BQVYsQ0FBWjtBQUNBQyxNQUFJTixJQUFKLEdBQVdBLFFBQVEsU0FBbkI7QUFDQU0sTUFBSUYsSUFBSixHQUFXQSxJQUFYO0FBQ0EsU0FBT0UsR0FBUDtBQUNILEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEVycm9ycyBkZWZpbml0aW9uIGFuZCBoZWxwZXJzXG4gKiBUaGlzIGZpbGUgaXQgaXMgYSBwYXJ0IG9mIHRoZSBQYW5kb3JhIFB5cnJoYSBKYXZhc2NyaXB0IGxpYnJhcnlcbiAqIFxuICogQGZpbGUgZXJyb3JzLmpzXG4gKiBAYXV0aG9yIEtvc3RpYW50eW4gU215cm5vdiA8a29zdHlzaEBnbWFpbC5jb20+XG4gKiBAZGF0ZSAyMDE4XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgY29uc3QgT1BUSU9OU19SRVFVSVJFRCA9ICdPUFRJT05TX1JFUVVJUkVEJztcbmV4cG9ydCBjb25zdCBXUk9OR19UWVBFID0gJ1dST05HX1RZUEUnO1xuZXhwb3J0IGNvbnN0IEFERFJFU1NfUkVRVUlSRUQgPSAnQUREUkVTU19SRVFVSVJFRCc7XG5leHBvcnQgY29uc3QgV0VCM19SRVFVSVJFRCA9ICdXRUIzX1JFUVVJUkVEJztcbmV4cG9ydCBjb25zdCBXRUIzX05PVF9DT05ORUNURUQgPSAnV0VCM19OT1RfQ09OTkVDVEVEJztcbmV4cG9ydCBjb25zdCBDT05UUkFDVF9SRVFVSVJFRCA9ICdDT05UUkFDVF9SRVFVSVJFRCc7XG5leHBvcnQgY29uc3QgSVBGU19SRVFVSVJFRCA9ICdJUEZTX1JFUVVJUkVEJztcbmV4cG9ydCBjb25zdCBJUEZTX05PVF9DT05ORUNURUQgPSAnSVBGU19OT1RfQ09OTkVDVEVEJztcbmV4cG9ydCBjb25zdCBXRUIzX01FVEFNQVNLX1JFUVVJUkVEID0gJ1dFQjNfTUVUQU1BU0tfUkVRVUlSRUQnO1xuZXhwb3J0IGNvbnN0IFRSQU5TQUNUSU9OX1VOU1VDQ0VTU0ZVTCA9ICdUUkFOU0FDVElPTl9VTlNVQ0NFU1NGVUwnO1xuZXhwb3J0IGNvbnN0IEZBSUxVUkVfRVZFTlQgPSAnRkFJTFVSRV9FVkVOVCc7XG5cbmV4cG9ydCBkZWZhdWx0IChjb2RlLCBrZXksIHR5cGUsIHZhbHVlLCAuLi5hcmdzKSA9PiB7XG4gICAgbGV0IG1lc3NhZ2UgPSAnVW5rbm93biBlcnJvcic7XG4gICAgICAgIFxuICAgIHN3aXRjaCAoY29kZSkge1xuICAgICAgICBjYXNlIE9QVElPTlNfUkVRVUlSRUQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gJ0NvbmZpZyBvcHRpb25zIGlzIHJlcXVpcmVkIGFuZCBleHBlY3RlZCB0byBiZSBhbiBvYmplY3QnO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBXUk9OR19UWVBFOlxuICAgICAgICAgICAgbWVzc2FnZSA9IGBXcm9uZyBwcm9wZXJ0eSB0eXBlLiBFeHBlY3RlZCAnJHtrZXl9JyB0byBiZTogJyR7dHlwZX0nLCBidXQgZ290OiAnJHt2YWx1ZX0nYDtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgV0VCM19SRVFVSVJFRDpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSAnV2ViMyBBUEkgcmVxdWlyZWQnO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBXRUIzX05PVF9DT05ORUNURUQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gJ1dlYjMgbm90IGNvbm5lY3RlZCB0byBwcm92aWRlcic7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFdFQjNfTUVUQU1BU0tfUkVRVUlSRUQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gJ01ldGFNYXNrIGlzIHJlcXVpcmVkIHRvIHBlcmZvcm0gdGhpcyBvcGVyYXRpb24nO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBDT05UUkFDVF9SRVFVSVJFRDpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgQ29udHJhY3QgJyR7YXJnc1swXX0nIGlzIHJlcXVpcmVkYDtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQUREUkVTU19SRVFVSVJFRDpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgQWRkcmVzcyBvZiAnJHthcmdzWzBdIHx8IGtleX0nIGlzIHJlcXVpcmVkLiBXcm9uZyBldGhlcmV1bSBhZGRyZXNzOiAke3ZhbHVlfWA7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIElQRlNfUkVRVUlSRUQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gJ0lQRlMgQVBJIHJlcXVpcmVkJztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgSVBGU19OT1RfQ09OTkVDVEVEOlxuICAgICAgICAgICAgbWVzc2FnZSA9ICdObyBjb25uZWN0aW9uIHRvIElQRlMgc2VydmVyJztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgVFJBTlNBQ1RJT05fVU5TVUNDRVNTRlVMOlxuICAgICAgICAgICAgbWVzc2FnZSA9ICdUcmFuc2FjdGlvbiB3YXMgdW5zdWNjZXNzZnVsJztcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgRkFJTFVSRV9FVkVOVDpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSAnQ29udHJhY3QgcmV0dXJucyBhbiBmYWlsdXJlIGV2ZW50JztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICBlcnIuY29kZSA9IGNvZGUgfHwgJ1VOS05PV04nO1xuICAgIGVyci5hcmdzID0gYXJncztcbiAgICByZXR1cm4gZXJyO1xufTtcbiJdfQ==