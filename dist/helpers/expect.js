/**
 * Ensuring expected parameters helper
 * This file it is a part of the Pandora Pyrrha Javascript library
 * 
 * @file expect.js
 * @author Kostiantyn Smyrnov <kostysh@gmail.com>
 * @date 2018
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.all = void 0;

var _errors = _interopRequireWildcard(require("./errors"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var all = function all() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var model = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (_typeof(options) !== 'object' || Object.keys(options).length === 0) {
    throw (0, _errors.default)(_errors.OPTIONS_REQUIRED);
  }

  var _arr = Object.keys(model);

  for (var _i = 0; _i < _arr.length; _i++) {
    var key = _arr[_i];
    var value = key.split('.').reduce(function (acc, part) {
      return acc[part] !== undefined ? acc[part] : null;
    }, options);
    var memberValue = void 0;

    switch (model[key].type) {
      case 'enum':
        if (!model[key].values || !Array.isArray(model[key].values)) {
          throw _errors.default.apply(undefined, [model[key].code || _errors.EXPECT_TYPE_OPTIONS_REQUIRED, key, model[key].type, value].concat(_toConsumableArray(model[key].args ? model[key].args : [undefined])));
        }

        if (!model[key].values.includes(value)) {
          throw _errors.default.apply(undefined, [model[key].code || _errors.WRONG_TYPE, key, model[key].type, value].concat(_toConsumableArray(model[key].args ? model[key].args : [undefined])));
        }

        break;

      case 'address':
        if (!new RegExp('^0x[a-fA-F0-9]{40}$').test(value)) {
          throw _errors.default.apply(undefined, [model[key].code || _errors.ADDRESS_REQUIRED, key, model[key].type, value].concat(_toConsumableArray(model[key].args ? model[key].args : [undefined])));
        }

        break;

      case 'member':
        if (!model[key].provider || _typeof(model[key].provider) !== 'object') {
          throw _errors.default.apply(undefined, [model[key].code || "Provider object must be defined as \"provider\" model option for \"".concat(key, "\""), key, model[key].type, value].concat(_toConsumableArray(model[key].args ? model[key].args : [undefined])));
        }

        memberValue = value.split('.').reduce(function (acc, part) {
          return acc && acc[part] !== undefined ? acc[part] : null;
        }, model[key].provider);

        if (!memberValue) {
          throw _errors.default.apply(undefined, [model[key].code || _errors.EXPECT_NOT_A_MEMBER, key, model[key].type, value].concat(_toConsumableArray(model[key].args ? model[key].args : [undefined])));
        }

        break;

      default:
        if (_typeof(value) !== model[key].type && (model[key].required === true || model[key].required === undefined)) {
          throw _errors.default.apply(undefined, [model[key].code || _errors.WRONG_TYPE, key, model[key].type, value].concat(_toConsumableArray(model[key].args ? model[key].args : [undefined])));
        }

    }
  }
};

exports.all = all;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,