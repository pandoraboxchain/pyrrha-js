"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transfer = exports.approve = exports.balanceOf = void 0;

var expect = _interopRequireWildcard(require("./helpers/expect"));

var _errors = _interopRequireWildcard(require("./helpers/errors"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/**
 * Pan token methods
 * This file it is a part of the Pandora Pyrrha Javascript library
 * 
 * @file pan.js
 * @author Kostiantyn Smyrnov <kostysh@gmail.com>
 * @date 2019
 */

/**
 * Get tokens balance
 * 
 * @param {String} address Tokens owner address
 * @param {Object} config Library config (provided by the proxy but can be overridden) 
 */
const balanceOf = async (address = '', config = {}) => {
  expect.all({
    address
  }, {
    'address': {
      type: 'address',
      code: _errors.ADDRESS_REQUIRED,
      args: ['Tokens owner address']
    }
  });
  expect.all(config, {
    'web3': {
      type: 'object',
      code: _errors.WEB3_REQUIRED
    },
    'contracts.Pan.abi': {
      type: 'object',
      code: _errors.CONTRACT_REQUIRED,
      args: ['Pan']
    },
    'addresses.Pan': {
      type: 'address',
      code: _errors.ADDRESS_REQUIRED,
      args: ['Pan']
    }
  });
  const eco = new config.web3.eth.Contract(config.contracts.Pan.abi, config.addresses.Pan);
  const balance = await eco.methods.balanceOf(address).call();
  return Number.parseInt(balance, 10);
};
/**
 * Approve specific amount of tokens to be spent
 * 
 * @param {String} ownerAddress 
 * @param {String} spenderAddress 
 * @param {Number} value
 * @param {Object} config Library config (provided by the proxy but can be overridden) 
 */


exports.balanceOf = balanceOf;

const approve = (ownerAddress, spenderAddress, value, config = {}) => new Promise((resolve, reject) => {
  expect.all({
    ownerAddress,
    spenderAddress,
    value
  }, {
    'ownerAddress': {
      type: 'address',
      code: _errors.ADDRESS_REQUIRED,
      args: ['Tokens owner address']
    },
    'spenderAddress': {
      type: 'address',
      code: _errors.ADDRESS_REQUIRED,
      args: ['Tokens spender address']
    },
    'value': {
      type: 'number',
      args: ['Amount of tokens']
    }
  });
  expect.all(config, {
    'web3': {
      type: 'object',
      code: _errors.WEB3_REQUIRED
    },
    'contracts.Pan.abi': {
      type: 'object',
      code: _errors.CONTRACT_REQUIRED,
      args: ['Pan']
    },
    'addresses.Pan': {
      type: 'address',
      code: _errors.ADDRESS_REQUIRED,
      args: ['Pan']
    }
  });
  const pan = new config.web3.eth.Contract(config.contracts.Pan.abi, config.addresses.Pan);
  pan.methods.approve(spenderAddress, config.web3.utils.toHex(value)).send({
    from: ownerAddress
  }).on('error', reject).on('receipt', receipt => {
    if (Number(receipt.status) === 0) {
      return reject((0, _errors.default)(_errors.TRANSACTION_UNSUCCESSFUL));
    }

    resolve(receipt);
  });
});
/**
 * Transfer tokens to the address
 * 
 * @param {String} ownerAddress 
 * @param {String} destinationAddress 
 * @param {Number} value
 * @param {Object} config Library config (provided by the proxy but can be overridden) 
 */


exports.approve = approve;

const transfer = (ownerAddress, destinationAddress, value, config = {}) => new Promise((resolve, reject) => {
  expect.all({
    ownerAddress,
    destinationAddress,
    value
  }, {
    'ownerAddress': {
      type: 'address',
      code: _errors.ADDRESS_REQUIRED,
      args: ['Tokens owner address']
    },
    'destinationAddress': {
      type: 'address',
      code: _errors.ADDRESS_REQUIRED,
      args: ['Tokens destination address']
    },
    'value': {
      type: 'number',
      args: ['Amount of tokens']
    }
  });
  expect.all(config, {
    'web3': {
      type: 'object',
      code: _errors.WEB3_REQUIRED
    },
    'contracts.Pan.abi': {
      type: 'object',
      code: _errors.CONTRACT_REQUIRED,
      args: ['Pan']
    },
    'addresses.Pan': {
      type: 'address',
      code: _errors.ADDRESS_REQUIRED,
      args: ['Pan']
    }
  });
  const pan = new config.web3.eth.Contract(config.contracts.Pan.abi, config.addresses.Pan);
  pan.methods.transfer(destinationAddress, config.web3.utils.toHex(value)).send({
    from: ownerAddress
  }).on('error', reject).on('receipt', receipt => {
    if (Number(receipt.status) === 0) {
      return reject((0, _errors.default)(_errors.TRANSACTION_UNSUCCESSFUL));
    }

    resolve(receipt);
  });
});

exports.transfer = transfer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,