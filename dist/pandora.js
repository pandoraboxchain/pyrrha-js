/**
 * Common Pandora contract methods
 * This file it is a part of the Pandora Pyrrha Javascript library
 * 
 * @file pandora.js
 * @author Kostiantyn Smyrnov <kostysh@gmail.com>
 * @date 2018
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMaximumWorkerPrice = exports.createWorkerNode = exports.whitelistWorkerOwner = exports.version = void 0;

var expect = _interopRequireWildcard(require("./helpers/expect"));

var _errors = _interopRequireWildcard(require("./helpers/errors"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/**
 * Get deployed contracts version
 * 
 * @param {Object} config Library config (provided by the proxy but can be overridden)
 * @returns {Promise}
 */
const version = async (config = {}) => {
  expect.all(config, {
    'web3': {
      type: 'object',
      code: _errors.WEB3_REQUIRED
    },
    'contracts.Pandora.abi': {
      type: 'object',
      code: _errors.CONTRACT_REQUIRED,
      args: ['Pandora']
    },
    'addresses.Pandora': {
      type: 'address',
      code: _errors.ADDRESS_REQUIRED,
      args: ['Pandora']
    }
  });
  const pan = new config.web3.eth.Contract(config.contracts.Pandora.abi, config.addresses.Pandora);
  const version = await pan.methods.version().call();
  return version;
};
/**
 * Public and externalAdds address to the whitelist of owners allowed to create WorkerNodes contracts
 * 
 * @param {String} publisher 
 * @param {String} ownerAddress 
 * @param {Object} config Library config (provided by the proxy but can be overridden) 
 */


exports.version = version;

const whitelistWorkerOwner = (publisher, ownerAddress, config = {}) => new Promise((resolve, reject) => {
  expect.all({
    publisher,
    ownerAddress
  }, {
    'publisher': {
      type: 'address',
      code: _errors.ADDRESS_REQUIRED,
      args: ['Pandora contract owner']
    },
    'ownerAddress': {
      type: 'address',
      code: _errors.ADDRESS_REQUIRED,
      args: ['WorkerNode owner']
    }
  });
  expect.all(config, {
    'web3': {
      type: 'object',
      code: _errors.WEB3_REQUIRED
    }
  });
  const pan = new config.web3.eth.Contract(config.contracts.Pandora.abi, config.addresses.Pandora);
  pan.methods.whitelistWorkerOwner(ownerAddress).send({
    from: publisher
  }).on('error', reject).on('receipt', receipt => {
    if (Number(receipt.status) === 0) {
      return reject((0, _errors.default)(_errors.TRANSACTION_UNSUCCESSFUL));
    }

    resolve(receipt);
  });
});
/**
 * Creates, registers and returns a new worker node owned by the caller of the contract. 
 * Can be called only by the whitelisted node owner address
 * 
 * @param {Number} computingPrice
 * @param {String} publisher 
 * @param {Object} config
 */


exports.whitelistWorkerOwner = whitelistWorkerOwner;

const createWorkerNode = (computingPrice, publisher, config = {}) => new Promise((resolve, reject) => {
  expect.all({
    publisher
  }, {
    'publisher': {
      type: 'address',
      code: _errors.ADDRESS_REQUIRED,
      args: ['Pandora contract owner']
    }
  });
  expect.all(config, {
    'web3': {
      type: 'object',
      code: _errors.WEB3_REQUIRED
    },
    'contracts.WorkerNode': {
      type: 'object',
      code: _errors.CONTRACT_REQUIRED,
      args: ['WorkerNode']
    }
  });
  const pan = new config.web3.eth.Contract(config.contracts.Pandora.abi, config.addresses.Pandora);
  pan.methods.createWorkerNode(config.web3.utils.toHex(computingPrice)).send({
    from: publisher,
    gas: 6700000 // because this workflow is too greedy

  }).on('error', reject).on('receipt', receipt => {
    if (Number(receipt.status) === 0) {
      return reject((0, _errors.default)(_errors.TRANSACTION_UNSUCCESSFUL));
    } // console.log('>>>>> worker node result', receipt.events.WorkerNodeCreated.returnValues)
    // console.log('>>>>> worker node address', receipt.events.WorkerNodeCreated.address)


    resolve(receipt.events.WorkerNodeCreated.returnValues.workerNode); // address of created WorkerNode
  });
});
/**
 * Return maximum value of the computing price
 * 
 * @param {Object} config Library config (provided by the proxy but can be overridden)
 */


exports.createWorkerNode = createWorkerNode;

const getMaximumWorkerPrice = async (config = {}) => {
  expect.all(config, {
    'web3': {
      type: 'object',
      code: _errors.WEB3_REQUIRED
    },
    'contracts.Pandora.abi': {
      type: 'object',
      code: _errors.CONTRACT_REQUIRED,
      args: ['Pandora']
    },
    'addresses.Pandora': {
      type: 'address',
      code: _errors.ADDRESS_REQUIRED,
      args: ['Pandora']
    }
  });
  const pan = new config.web3.eth.Contract(config.contracts.Pandora.abi, config.addresses.Pandora);
  const price = await pan.methods.getMaximumWorkerPrice().call();
  return Number.parseInt(price, 10);
};

exports.getMaximumWorkerPrice = getMaximumWorkerPrice;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,